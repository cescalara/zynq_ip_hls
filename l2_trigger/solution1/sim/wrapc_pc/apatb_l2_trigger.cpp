// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->
    template< int D ,int U ,int TI ,int TD > struct ap_axis;
    template<> struct ap_axis<32, 2, 5, 6> {
        ap_int<32> data;
        ap_uint<4> keep;
        ap_uint<4> strb;
        ap_uint<2> user;
        ap_uint<1> last;
        ap_uint<5> id;
        ap_uint<6> dest;
       } ;

          template< int D ,int U ,int TI ,int TD > struct ap_axis;
          template<> struct ap_axis<64, 2, 5, 6> {
              ap_int<64> data;
              ap_uint<8> keep;
              ap_uint<8> strb;
              ap_uint<2> user;
              ap_uint<1> last;
              ap_uint<5> id;
              ap_uint<6> dest;
             } ;



// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "in_stream_V_data_V"
#define AUTOTB_TVIN_in_stream_V_data_V  "../tv/cdatafile/c.l2_trigger.autotvin_in_stream_V_data_V.dat"
#define WRAPC_STREAM_SIZE_IN_in_stream_V_data_V  "../tv/stream_size/stream_size_in_in_stream_V_data_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_in_stream_V_data_V  "../tv/stream_size/stream_ingress_status_in_stream_V_data_V.dat"
// wrapc file define: "in_stream_V_keep_V"
#define AUTOTB_TVIN_in_stream_V_keep_V  "../tv/cdatafile/c.l2_trigger.autotvin_in_stream_V_keep_V.dat"
#define WRAPC_STREAM_SIZE_IN_in_stream_V_keep_V  "../tv/stream_size/stream_size_in_in_stream_V_keep_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_in_stream_V_keep_V  "../tv/stream_size/stream_ingress_status_in_stream_V_keep_V.dat"
// wrapc file define: "in_stream_V_strb_V"
#define AUTOTB_TVIN_in_stream_V_strb_V  "../tv/cdatafile/c.l2_trigger.autotvin_in_stream_V_strb_V.dat"
#define WRAPC_STREAM_SIZE_IN_in_stream_V_strb_V  "../tv/stream_size/stream_size_in_in_stream_V_strb_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_in_stream_V_strb_V  "../tv/stream_size/stream_ingress_status_in_stream_V_strb_V.dat"
// wrapc file define: "in_stream_V_user_V"
#define AUTOTB_TVIN_in_stream_V_user_V  "../tv/cdatafile/c.l2_trigger.autotvin_in_stream_V_user_V.dat"
#define WRAPC_STREAM_SIZE_IN_in_stream_V_user_V  "../tv/stream_size/stream_size_in_in_stream_V_user_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_in_stream_V_user_V  "../tv/stream_size/stream_ingress_status_in_stream_V_user_V.dat"
// wrapc file define: "in_stream_V_last_V"
#define AUTOTB_TVIN_in_stream_V_last_V  "../tv/cdatafile/c.l2_trigger.autotvin_in_stream_V_last_V.dat"
#define WRAPC_STREAM_SIZE_IN_in_stream_V_last_V  "../tv/stream_size/stream_size_in_in_stream_V_last_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_in_stream_V_last_V  "../tv/stream_size/stream_ingress_status_in_stream_V_last_V.dat"
// wrapc file define: "in_stream_V_id_V"
#define AUTOTB_TVIN_in_stream_V_id_V  "../tv/cdatafile/c.l2_trigger.autotvin_in_stream_V_id_V.dat"
#define WRAPC_STREAM_SIZE_IN_in_stream_V_id_V  "../tv/stream_size/stream_size_in_in_stream_V_id_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_in_stream_V_id_V  "../tv/stream_size/stream_ingress_status_in_stream_V_id_V.dat"
// wrapc file define: "in_stream_V_dest_V"
#define AUTOTB_TVIN_in_stream_V_dest_V  "../tv/cdatafile/c.l2_trigger.autotvin_in_stream_V_dest_V.dat"
#define WRAPC_STREAM_SIZE_IN_in_stream_V_dest_V  "../tv/stream_size/stream_size_in_in_stream_V_dest_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_in_stream_V_dest_V  "../tv/stream_size/stream_ingress_status_in_stream_V_dest_V.dat"
// wrapc file define: "out_stream_V_data_V"
#define AUTOTB_TVOUT_out_stream_V_data_V  "../tv/cdatafile/c.l2_trigger.autotvout_out_stream_V_data_V.dat"
#define AUTOTB_TVIN_out_stream_V_data_V  "../tv/cdatafile/c.l2_trigger.autotvin_out_stream_V_data_V.dat"
#define WRAPC_STREAM_SIZE_OUT_out_stream_V_data_V  "../tv/stream_size/stream_size_out_out_stream_V_data_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_out_stream_V_data_V  "../tv/stream_size/stream_egress_status_out_stream_V_data_V.dat"
// wrapc file define: "out_stream_V_keep_V"
#define AUTOTB_TVOUT_out_stream_V_keep_V  "../tv/cdatafile/c.l2_trigger.autotvout_out_stream_V_keep_V.dat"
#define AUTOTB_TVIN_out_stream_V_keep_V  "../tv/cdatafile/c.l2_trigger.autotvin_out_stream_V_keep_V.dat"
#define WRAPC_STREAM_SIZE_OUT_out_stream_V_keep_V  "../tv/stream_size/stream_size_out_out_stream_V_keep_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_out_stream_V_keep_V  "../tv/stream_size/stream_egress_status_out_stream_V_keep_V.dat"
// wrapc file define: "out_stream_V_strb_V"
#define AUTOTB_TVOUT_out_stream_V_strb_V  "../tv/cdatafile/c.l2_trigger.autotvout_out_stream_V_strb_V.dat"
#define AUTOTB_TVIN_out_stream_V_strb_V  "../tv/cdatafile/c.l2_trigger.autotvin_out_stream_V_strb_V.dat"
#define WRAPC_STREAM_SIZE_OUT_out_stream_V_strb_V  "../tv/stream_size/stream_size_out_out_stream_V_strb_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_out_stream_V_strb_V  "../tv/stream_size/stream_egress_status_out_stream_V_strb_V.dat"
// wrapc file define: "out_stream_V_user_V"
#define AUTOTB_TVOUT_out_stream_V_user_V  "../tv/cdatafile/c.l2_trigger.autotvout_out_stream_V_user_V.dat"
#define AUTOTB_TVIN_out_stream_V_user_V  "../tv/cdatafile/c.l2_trigger.autotvin_out_stream_V_user_V.dat"
#define WRAPC_STREAM_SIZE_OUT_out_stream_V_user_V  "../tv/stream_size/stream_size_out_out_stream_V_user_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_out_stream_V_user_V  "../tv/stream_size/stream_egress_status_out_stream_V_user_V.dat"
// wrapc file define: "out_stream_V_last_V"
#define AUTOTB_TVOUT_out_stream_V_last_V  "../tv/cdatafile/c.l2_trigger.autotvout_out_stream_V_last_V.dat"
#define AUTOTB_TVIN_out_stream_V_last_V  "../tv/cdatafile/c.l2_trigger.autotvin_out_stream_V_last_V.dat"
#define WRAPC_STREAM_SIZE_OUT_out_stream_V_last_V  "../tv/stream_size/stream_size_out_out_stream_V_last_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_out_stream_V_last_V  "../tv/stream_size/stream_egress_status_out_stream_V_last_V.dat"
// wrapc file define: "out_stream_V_id_V"
#define AUTOTB_TVOUT_out_stream_V_id_V  "../tv/cdatafile/c.l2_trigger.autotvout_out_stream_V_id_V.dat"
#define AUTOTB_TVIN_out_stream_V_id_V  "../tv/cdatafile/c.l2_trigger.autotvin_out_stream_V_id_V.dat"
#define WRAPC_STREAM_SIZE_OUT_out_stream_V_id_V  "../tv/stream_size/stream_size_out_out_stream_V_id_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_out_stream_V_id_V  "../tv/stream_size/stream_egress_status_out_stream_V_id_V.dat"
// wrapc file define: "out_stream_V_dest_V"
#define AUTOTB_TVOUT_out_stream_V_dest_V  "../tv/cdatafile/c.l2_trigger.autotvout_out_stream_V_dest_V.dat"
#define AUTOTB_TVIN_out_stream_V_dest_V  "../tv/cdatafile/c.l2_trigger.autotvin_out_stream_V_dest_V.dat"
#define WRAPC_STREAM_SIZE_OUT_out_stream_V_dest_V  "../tv/stream_size/stream_size_out_out_stream_V_dest_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_out_stream_V_dest_V  "../tv/stream_size/stream_egress_status_out_stream_V_dest_V.dat"
// wrapc file define: "n_pixels_in_bus"
#define AUTOTB_TVIN_n_pixels_in_bus  "../tv/cdatafile/c.l2_trigger.autotvin_n_pixels_in_bus.dat"
// wrapc file define: "N_BG"
#define AUTOTB_TVIN_N_BG  "../tv/cdatafile/c.l2_trigger.autotvin_N_BG.dat"
// wrapc file define: "LOW_THRESH"
#define AUTOTB_TVIN_LOW_THRESH  "../tv/cdatafile/c.l2_trigger.autotvin_LOW_THRESH.dat"
// wrapc file define: "double_trig"
#define AUTOTB_TVOUT_double_trig  "../tv/cdatafile/c.l2_trigger.autotvout_double_trig.dat"
// wrapc file define: "trig_data"
#define AUTOTB_TVOUT_trig_data  "../tv/cdatafile/c.l2_trigger.autotvout_trig_data.dat"
// wrapc file define: "trig_pixel"
#define AUTOTB_TVOUT_trig_pixel  "../tv/cdatafile/c.l2_trigger.autotvout_trig_pixel.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "out_stream_V_data_V"
#define AUTOTB_TVOUT_PC_out_stream_V_data_V  "../tv/rtldatafile/rtl.l2_trigger.autotvout_out_stream_V_data_V.dat"
// tvout file define: "out_stream_V_keep_V"
#define AUTOTB_TVOUT_PC_out_stream_V_keep_V  "../tv/rtldatafile/rtl.l2_trigger.autotvout_out_stream_V_keep_V.dat"
// tvout file define: "out_stream_V_strb_V"
#define AUTOTB_TVOUT_PC_out_stream_V_strb_V  "../tv/rtldatafile/rtl.l2_trigger.autotvout_out_stream_V_strb_V.dat"
// tvout file define: "out_stream_V_user_V"
#define AUTOTB_TVOUT_PC_out_stream_V_user_V  "../tv/rtldatafile/rtl.l2_trigger.autotvout_out_stream_V_user_V.dat"
// tvout file define: "out_stream_V_last_V"
#define AUTOTB_TVOUT_PC_out_stream_V_last_V  "../tv/rtldatafile/rtl.l2_trigger.autotvout_out_stream_V_last_V.dat"
// tvout file define: "out_stream_V_id_V"
#define AUTOTB_TVOUT_PC_out_stream_V_id_V  "../tv/rtldatafile/rtl.l2_trigger.autotvout_out_stream_V_id_V.dat"
// tvout file define: "out_stream_V_dest_V"
#define AUTOTB_TVOUT_PC_out_stream_V_dest_V  "../tv/rtldatafile/rtl.l2_trigger.autotvout_out_stream_V_dest_V.dat"
// tvout file define: "double_trig"
#define AUTOTB_TVOUT_PC_double_trig  "../tv/rtldatafile/rtl.l2_trigger.autotvout_double_trig.dat"
// tvout file define: "trig_data"
#define AUTOTB_TVOUT_PC_trig_data  "../tv/rtldatafile/rtl.l2_trigger.autotvout_trig_data.dat"
// tvout file define: "trig_pixel"
#define AUTOTB_TVOUT_PC_trig_pixel  "../tv/rtldatafile/rtl.l2_trigger.autotvout_trig_pixel.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			in_stream_V_data_V_depth = 0;
			in_stream_V_keep_V_depth = 0;
			in_stream_V_strb_V_depth = 0;
			in_stream_V_user_V_depth = 0;
			in_stream_V_last_V_depth = 0;
			in_stream_V_id_V_depth = 0;
			in_stream_V_dest_V_depth = 0;
			out_stream_V_data_V_depth = 0;
			out_stream_V_keep_V_depth = 0;
			out_stream_V_strb_V_depth = 0;
			out_stream_V_user_V_depth = 0;
			out_stream_V_last_V_depth = 0;
			out_stream_V_id_V_depth = 0;
			out_stream_V_dest_V_depth = 0;
			n_pixels_in_bus_depth = 0;
			N_BG_depth = 0;
			LOW_THRESH_depth = 0;
			double_trig_depth = 0;
			trig_data_depth = 0;
			trig_pixel_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{in_stream_V_data_V " << in_stream_V_data_V_depth << "}\n";
			total_list << "{in_stream_V_keep_V " << in_stream_V_keep_V_depth << "}\n";
			total_list << "{in_stream_V_strb_V " << in_stream_V_strb_V_depth << "}\n";
			total_list << "{in_stream_V_user_V " << in_stream_V_user_V_depth << "}\n";
			total_list << "{in_stream_V_last_V " << in_stream_V_last_V_depth << "}\n";
			total_list << "{in_stream_V_id_V " << in_stream_V_id_V_depth << "}\n";
			total_list << "{in_stream_V_dest_V " << in_stream_V_dest_V_depth << "}\n";
			total_list << "{out_stream_V_data_V " << out_stream_V_data_V_depth << "}\n";
			total_list << "{out_stream_V_keep_V " << out_stream_V_keep_V_depth << "}\n";
			total_list << "{out_stream_V_strb_V " << out_stream_V_strb_V_depth << "}\n";
			total_list << "{out_stream_V_user_V " << out_stream_V_user_V_depth << "}\n";
			total_list << "{out_stream_V_last_V " << out_stream_V_last_V_depth << "}\n";
			total_list << "{out_stream_V_id_V " << out_stream_V_id_V_depth << "}\n";
			total_list << "{out_stream_V_dest_V " << out_stream_V_dest_V_depth << "}\n";
			total_list << "{n_pixels_in_bus " << n_pixels_in_bus_depth << "}\n";
			total_list << "{N_BG " << N_BG_depth << "}\n";
			total_list << "{LOW_THRESH " << LOW_THRESH_depth << "}\n";
			total_list << "{double_trig " << double_trig_depth << "}\n";
			total_list << "{trig_data " << trig_data_depth << "}\n";
			total_list << "{trig_pixel " << trig_pixel_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int in_stream_V_data_V_depth;
		int in_stream_V_keep_V_depth;
		int in_stream_V_strb_V_depth;
		int in_stream_V_user_V_depth;
		int in_stream_V_last_V_depth;
		int in_stream_V_id_V_depth;
		int in_stream_V_dest_V_depth;
		int out_stream_V_data_V_depth;
		int out_stream_V_keep_V_depth;
		int out_stream_V_strb_V_depth;
		int out_stream_V_user_V_depth;
		int out_stream_V_last_V_depth;
		int out_stream_V_id_V_depth;
		int out_stream_V_dest_V_depth;
		int n_pixels_in_bus_depth;
		int N_BG_depth;
		int LOW_THRESH_depth;
		int double_trig_depth;
		int trig_data_depth;
		int trig_pixel_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};


#define l2_trigger AESL_ORIG_DUT_l2_trigger
extern void l2_trigger (
hls::stream<ap_axis<32, 2, 5, 6 > >& in_stream,
hls::stream<ap_axis<64, 2, 5, 6 > >& out_stream,
unsigned short n_pixels_in_bus,
unsigned char N_BG,
unsigned int LOW_THRESH,
volatile unsigned int* double_trig,
volatile unsigned int* trig_data,
volatile unsigned int* trig_pixel);
#undef l2_trigger

void l2_trigger (
hls::stream<ap_axis<32, 2, 5, 6 > >& in_stream,
hls::stream<ap_axis<64, 2, 5, 6 > >& out_stream,
unsigned short n_pixels_in_bus,
unsigned char N_BG,
unsigned int LOW_THRESH,
volatile unsigned int* double_trig,
volatile unsigned int* trig_data,
volatile unsigned int* trig_pixel)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;

		// pop stream input: "in_stream"
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_in_stream_V_data_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_in_stream_V_data_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_in_stream_V_data_V, AESL_token); // pop_size
			int aesl_tmp_1 = atoi(AESL_token.c_str());
			for (int i = 0; i < aesl_tmp_1; i++)
			{
				in_stream.read();
			}
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_in_stream_V_data_V, AESL_token); // [[/transaction]]
		}

		// define output stream variables: "out_stream"
		std::vector<ap_axis<64, 2, 5, 6 > > aesl_tmp_3;
		int aesl_tmp_4;
		int aesl_tmp_5 = 0;

		// read output stream size: "out_stream"
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_out_stream_V_data_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_out_stream_V_data_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_out_stream_V_data_V, AESL_token); // pop_size
			aesl_tmp_4 = atoi(AESL_token.c_str());
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_out_stream_V_data_V, AESL_token); // [[/transaction]]
		}

		// output port post check: "out_stream_V_data_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_data_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_data_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_data_V, AESL_token); // data

			std::vector<sc_bv<64> > out_stream_V_data_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out_stream_V_data_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out_stream_V_data_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					out_stream_V_data_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_data_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_out_stream_V_data_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_4)
			{
				aesl_tmp_4 = i;
			}

			if (aesl_tmp_4 > 0 && aesl_tmp_3.size() < aesl_tmp_4)
			{
				int aesl_tmp_3_size = aesl_tmp_3.size();

				for (int tmp_aesl_tmp_3 = 0; tmp_aesl_tmp_3 < aesl_tmp_4 - aesl_tmp_3_size; tmp_aesl_tmp_3++)
				{
					ap_axis<64, 2, 5, 6 > tmp;
					aesl_tmp_3.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: out_stream_V_data_V
				{
					// bitslice(63, 0)
					// {
						// celement: out_stream.V.data.V(63, 0)
						// {
							sc_lv<64>* out_stream_V_data_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<64>[aesl_tmp_4 - aesl_tmp_5];
						// }
					// }

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: out_stream.V.data.V(63, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_3[0].data) != NULL) // check the null address if the c port is array or others
									{
										out_stream_V_data_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(63, 0) = sc_bv<64>(out_stream_V_data_V_pc_buffer[hls_map_index].range(63, 0));
									}
								}
							}
						}
					}

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: out_stream.V.data.V(63, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_3[i_0].data
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_3[0].data
									// output_left_conversion : aesl_tmp_3[i_0].data
									// output_type_conversion : (out_stream_V_data_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_3[0].data) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_3[i_0].data = (out_stream_V_data_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "out_stream_V_keep_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_keep_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_keep_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_keep_V, AESL_token); // data

			std::vector<sc_bv<8> > out_stream_V_keep_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out_stream_V_keep_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out_stream_V_keep_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					out_stream_V_keep_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_keep_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_out_stream_V_keep_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_4)
			{
				aesl_tmp_4 = i;
			}

			if (aesl_tmp_4 > 0 && aesl_tmp_3.size() < aesl_tmp_4)
			{
				int aesl_tmp_3_size = aesl_tmp_3.size();

				for (int tmp_aesl_tmp_3 = 0; tmp_aesl_tmp_3 < aesl_tmp_4 - aesl_tmp_3_size; tmp_aesl_tmp_3++)
				{
					ap_axis<64, 2, 5, 6 > tmp;
					aesl_tmp_3.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: out_stream_V_keep_V
				{
					// bitslice(7, 0)
					// {
						// celement: out_stream.V.keep.V(7, 0)
						// {
							sc_lv<8>* out_stream_V_keep_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<8>[aesl_tmp_4 - aesl_tmp_5];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: out_stream.V.keep.V(7, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_3[0].keep) != NULL) // check the null address if the c port is array or others
									{
										out_stream_V_keep_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(7, 0) = sc_bv<8>(out_stream_V_keep_V_pc_buffer[hls_map_index].range(7, 0));
									}
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: out_stream.V.keep.V(7, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_3[i_0].keep
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_3[0].keep
									// output_left_conversion : aesl_tmp_3[i_0].keep
									// output_type_conversion : (out_stream_V_keep_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_3[0].keep) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_3[i_0].keep = (out_stream_V_keep_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "out_stream_V_strb_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_strb_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_strb_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_strb_V, AESL_token); // data

			std::vector<sc_bv<8> > out_stream_V_strb_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out_stream_V_strb_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out_stream_V_strb_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					out_stream_V_strb_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_strb_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_out_stream_V_strb_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_4)
			{
				aesl_tmp_4 = i;
			}

			if (aesl_tmp_4 > 0 && aesl_tmp_3.size() < aesl_tmp_4)
			{
				int aesl_tmp_3_size = aesl_tmp_3.size();

				for (int tmp_aesl_tmp_3 = 0; tmp_aesl_tmp_3 < aesl_tmp_4 - aesl_tmp_3_size; tmp_aesl_tmp_3++)
				{
					ap_axis<64, 2, 5, 6 > tmp;
					aesl_tmp_3.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: out_stream_V_strb_V
				{
					// bitslice(7, 0)
					// {
						// celement: out_stream.V.strb.V(7, 0)
						// {
							sc_lv<8>* out_stream_V_strb_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<8>[aesl_tmp_4 - aesl_tmp_5];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: out_stream.V.strb.V(7, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_3[0].strb) != NULL) // check the null address if the c port is array or others
									{
										out_stream_V_strb_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(7, 0) = sc_bv<8>(out_stream_V_strb_V_pc_buffer[hls_map_index].range(7, 0));
									}
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: out_stream.V.strb.V(7, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_3[i_0].strb
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_3[0].strb
									// output_left_conversion : aesl_tmp_3[i_0].strb
									// output_type_conversion : (out_stream_V_strb_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_3[0].strb) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_3[i_0].strb = (out_stream_V_strb_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "out_stream_V_user_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_user_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_user_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_user_V, AESL_token); // data

			std::vector<sc_bv<2> > out_stream_V_user_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out_stream_V_user_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out_stream_V_user_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					out_stream_V_user_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_user_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_out_stream_V_user_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_4)
			{
				aesl_tmp_4 = i;
			}

			if (aesl_tmp_4 > 0 && aesl_tmp_3.size() < aesl_tmp_4)
			{
				int aesl_tmp_3_size = aesl_tmp_3.size();

				for (int tmp_aesl_tmp_3 = 0; tmp_aesl_tmp_3 < aesl_tmp_4 - aesl_tmp_3_size; tmp_aesl_tmp_3++)
				{
					ap_axis<64, 2, 5, 6 > tmp;
					aesl_tmp_3.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: out_stream_V_user_V
				{
					// bitslice(1, 0)
					// {
						// celement: out_stream.V.user.V(1, 0)
						// {
							sc_lv<2>* out_stream_V_user_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<2>[aesl_tmp_4 - aesl_tmp_5];
						// }
					// }

					// bitslice(1, 0)
					{
						int hls_map_index = 0;
						// celement: out_stream.V.user.V(1, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_3[0].user) != NULL) // check the null address if the c port is array or others
									{
										out_stream_V_user_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(1, 0) = sc_bv<2>(out_stream_V_user_V_pc_buffer[hls_map_index].range(1, 0));
									}
								}
							}
						}
					}

					// bitslice(1, 0)
					{
						int hls_map_index = 0;
						// celement: out_stream.V.user.V(1, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_3[i_0].user
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_3[0].user
									// output_left_conversion : aesl_tmp_3[i_0].user
									// output_type_conversion : (out_stream_V_user_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_3[0].user) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_3[i_0].user = (out_stream_V_user_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "out_stream_V_last_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_last_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_last_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_last_V, AESL_token); // data

			std::vector<sc_bv<1> > out_stream_V_last_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out_stream_V_last_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out_stream_V_last_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					out_stream_V_last_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_last_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_out_stream_V_last_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_4)
			{
				aesl_tmp_4 = i;
			}

			if (aesl_tmp_4 > 0 && aesl_tmp_3.size() < aesl_tmp_4)
			{
				int aesl_tmp_3_size = aesl_tmp_3.size();

				for (int tmp_aesl_tmp_3 = 0; tmp_aesl_tmp_3 < aesl_tmp_4 - aesl_tmp_3_size; tmp_aesl_tmp_3++)
				{
					ap_axis<64, 2, 5, 6 > tmp;
					aesl_tmp_3.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: out_stream_V_last_V
				{
					// bitslice(0, 0)
					// {
						// celement: out_stream.V.last.V(0, 0)
						// {
							sc_lv<1>* out_stream_V_last_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<1>[aesl_tmp_4 - aesl_tmp_5];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: out_stream.V.last.V(0, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_3[0].last) != NULL) // check the null address if the c port is array or others
									{
										out_stream_V_last_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(out_stream_V_last_V_pc_buffer[hls_map_index].range(0, 0));
									}
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: out_stream.V.last.V(0, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_3[i_0].last
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_3[0].last
									// output_left_conversion : aesl_tmp_3[i_0].last
									// output_type_conversion : (out_stream_V_last_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_3[0].last) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_3[i_0].last = (out_stream_V_last_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "out_stream_V_id_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_id_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_id_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_id_V, AESL_token); // data

			std::vector<sc_bv<5> > out_stream_V_id_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out_stream_V_id_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out_stream_V_id_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					out_stream_V_id_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_id_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_out_stream_V_id_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_4)
			{
				aesl_tmp_4 = i;
			}

			if (aesl_tmp_4 > 0 && aesl_tmp_3.size() < aesl_tmp_4)
			{
				int aesl_tmp_3_size = aesl_tmp_3.size();

				for (int tmp_aesl_tmp_3 = 0; tmp_aesl_tmp_3 < aesl_tmp_4 - aesl_tmp_3_size; tmp_aesl_tmp_3++)
				{
					ap_axis<64, 2, 5, 6 > tmp;
					aesl_tmp_3.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: out_stream_V_id_V
				{
					// bitslice(4, 0)
					// {
						// celement: out_stream.V.id.V(4, 0)
						// {
							sc_lv<5>* out_stream_V_id_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<5>[aesl_tmp_4 - aesl_tmp_5];
						// }
					// }

					// bitslice(4, 0)
					{
						int hls_map_index = 0;
						// celement: out_stream.V.id.V(4, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_3[0].id) != NULL) // check the null address if the c port is array or others
									{
										out_stream_V_id_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(4, 0) = sc_bv<5>(out_stream_V_id_V_pc_buffer[hls_map_index].range(4, 0));
									}
								}
							}
						}
					}

					// bitslice(4, 0)
					{
						int hls_map_index = 0;
						// celement: out_stream.V.id.V(4, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_3[i_0].id
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_3[0].id
									// output_left_conversion : aesl_tmp_3[i_0].id
									// output_type_conversion : (out_stream_V_id_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_3[0].id) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_3[i_0].id = (out_stream_V_id_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "out_stream_V_dest_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_dest_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_dest_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_dest_V, AESL_token); // data

			std::vector<sc_bv<6> > out_stream_V_dest_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out_stream_V_dest_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out_stream_V_dest_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					out_stream_V_dest_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_out_stream_V_dest_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_out_stream_V_dest_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_4)
			{
				aesl_tmp_4 = i;
			}

			if (aesl_tmp_4 > 0 && aesl_tmp_3.size() < aesl_tmp_4)
			{
				int aesl_tmp_3_size = aesl_tmp_3.size();

				for (int tmp_aesl_tmp_3 = 0; tmp_aesl_tmp_3 < aesl_tmp_4 - aesl_tmp_3_size; tmp_aesl_tmp_3++)
				{
					ap_axis<64, 2, 5, 6 > tmp;
					aesl_tmp_3.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: out_stream_V_dest_V
				{
					// bitslice(5, 0)
					// {
						// celement: out_stream.V.dest.V(5, 0)
						// {
							sc_lv<6>* out_stream_V_dest_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<6>[aesl_tmp_4 - aesl_tmp_5];
						// }
					// }

					// bitslice(5, 0)
					{
						int hls_map_index = 0;
						// celement: out_stream.V.dest.V(5, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_3[0].dest) != NULL) // check the null address if the c port is array or others
									{
										out_stream_V_dest_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(5, 0) = sc_bv<6>(out_stream_V_dest_V_pc_buffer[hls_map_index].range(5, 0));
									}
								}
							}
						}
					}

					// bitslice(5, 0)
					{
						int hls_map_index = 0;
						// celement: out_stream.V.dest.V(5, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_3[i_0].dest
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_3[0].dest
									// output_left_conversion : aesl_tmp_3[i_0].dest
									// output_type_conversion : (out_stream_V_dest_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_3[0].dest) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_3[i_0].dest = (out_stream_V_dest_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "double_trig"
		aesl_fh.read(AUTOTB_TVOUT_PC_double_trig, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_double_trig, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_double_trig, AESL_token); // data

			sc_bv<32> *double_trig_pc_buffer = new sc_bv<32>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'double_trig', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'double_trig', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					double_trig_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_double_trig, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_double_trig))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: double_trig
				{
					// bitslice(31, 0)
					// {
						// celement: double_trig(31, 0)
						// {
							sc_lv<32>* double_trig_lv0_0_0_1 = new sc_lv<32>[1];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: double_trig(31, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(double_trig[0]) != NULL) // check the null address if the c port is array or others
								{
									double_trig_lv0_0_0_1[hls_map_index++].range(31, 0) = sc_bv<32>(double_trig_pc_buffer[hls_map_index].range(31, 0));
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: double_trig(31, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : double_trig[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : double_trig[0]
								// output_left_conversion : double_trig[i_0]
								// output_type_conversion : (double_trig_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(double_trig[0]) != NULL) // check the null address if the c port is array or others
								{
									double_trig[i_0] = (double_trig_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] double_trig_pc_buffer;
		}

		// output port post check: "trig_data"
		aesl_fh.read(AUTOTB_TVOUT_PC_trig_data, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_trig_data, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_trig_data, AESL_token); // data

			sc_bv<32> *trig_data_pc_buffer = new sc_bv<32>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'trig_data', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'trig_data', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					trig_data_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_trig_data, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_trig_data))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: trig_data
				{
					// bitslice(31, 0)
					// {
						// celement: trig_data(31, 0)
						// {
							sc_lv<32>* trig_data_lv0_0_0_1 = new sc_lv<32>[1];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: trig_data(31, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(trig_data[0]) != NULL) // check the null address if the c port is array or others
								{
									trig_data_lv0_0_0_1[hls_map_index++].range(31, 0) = sc_bv<32>(trig_data_pc_buffer[hls_map_index].range(31, 0));
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: trig_data(31, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : trig_data[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : trig_data[0]
								// output_left_conversion : trig_data[i_0]
								// output_type_conversion : (trig_data_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(trig_data[0]) != NULL) // check the null address if the c port is array or others
								{
									trig_data[i_0] = (trig_data_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] trig_data_pc_buffer;
		}

		// output port post check: "trig_pixel"
		aesl_fh.read(AUTOTB_TVOUT_PC_trig_pixel, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_trig_pixel, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_trig_pixel, AESL_token); // data

			sc_bv<32> *trig_pixel_pc_buffer = new sc_bv<32>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'trig_pixel', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'trig_pixel', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					trig_pixel_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_trig_pixel, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_trig_pixel))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: trig_pixel
				{
					// bitslice(31, 0)
					// {
						// celement: trig_pixel(31, 0)
						// {
							sc_lv<32>* trig_pixel_lv0_0_0_1 = new sc_lv<32>[1];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: trig_pixel(31, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(trig_pixel[0]) != NULL) // check the null address if the c port is array or others
								{
									trig_pixel_lv0_0_0_1[hls_map_index++].range(31, 0) = sc_bv<32>(trig_pixel_pc_buffer[hls_map_index].range(31, 0));
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: trig_pixel(31, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : trig_pixel[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : trig_pixel[0]
								// output_left_conversion : trig_pixel[i_0]
								// output_type_conversion : (trig_pixel_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(trig_pixel[0]) != NULL) // check the null address if the c port is array or others
								{
									trig_pixel[i_0] = (trig_pixel_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] trig_pixel_pc_buffer;
		}

		// push back output stream: "out_stream"
		for (int i = 0; i < aesl_tmp_4; i++)
		{
			out_stream.write(aesl_tmp_3[i]);
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "in_stream_V_data_V"
		char* tvin_in_stream_V_data_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_in_stream_V_data_V);
		char* wrapc_stream_size_in_in_stream_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_in_stream_V_data_V);
		char* wrapc_stream_ingress_status_in_stream_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_data_V);

		// "in_stream_V_keep_V"
		char* tvin_in_stream_V_keep_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_in_stream_V_keep_V);
		char* wrapc_stream_size_in_in_stream_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_in_stream_V_keep_V);
		char* wrapc_stream_ingress_status_in_stream_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_keep_V);

		// "in_stream_V_strb_V"
		char* tvin_in_stream_V_strb_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_in_stream_V_strb_V);
		char* wrapc_stream_size_in_in_stream_V_strb_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_in_stream_V_strb_V);
		char* wrapc_stream_ingress_status_in_stream_V_strb_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_strb_V);

		// "in_stream_V_user_V"
		char* tvin_in_stream_V_user_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_in_stream_V_user_V);
		char* wrapc_stream_size_in_in_stream_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_in_stream_V_user_V);
		char* wrapc_stream_ingress_status_in_stream_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_user_V);

		// "in_stream_V_last_V"
		char* tvin_in_stream_V_last_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_in_stream_V_last_V);
		char* wrapc_stream_size_in_in_stream_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_in_stream_V_last_V);
		char* wrapc_stream_ingress_status_in_stream_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_last_V);

		// "in_stream_V_id_V"
		char* tvin_in_stream_V_id_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_in_stream_V_id_V);
		char* wrapc_stream_size_in_in_stream_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_in_stream_V_id_V);
		char* wrapc_stream_ingress_status_in_stream_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_id_V);

		// "in_stream_V_dest_V"
		char* tvin_in_stream_V_dest_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_in_stream_V_dest_V);
		char* wrapc_stream_size_in_in_stream_V_dest_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_in_stream_V_dest_V);
		char* wrapc_stream_ingress_status_in_stream_V_dest_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_dest_V);

		// "out_stream_V_data_V"
		char* tvin_out_stream_V_data_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_out_stream_V_data_V);
		char* tvout_out_stream_V_data_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_out_stream_V_data_V);
		char* wrapc_stream_size_out_out_stream_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_out_stream_V_data_V);
		char* wrapc_stream_egress_status_out_stream_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_out_stream_V_data_V);

		// "out_stream_V_keep_V"
		char* tvin_out_stream_V_keep_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_out_stream_V_keep_V);
		char* tvout_out_stream_V_keep_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_out_stream_V_keep_V);
		char* wrapc_stream_size_out_out_stream_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_out_stream_V_keep_V);
		char* wrapc_stream_egress_status_out_stream_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_out_stream_V_keep_V);

		// "out_stream_V_strb_V"
		char* tvin_out_stream_V_strb_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_out_stream_V_strb_V);
		char* tvout_out_stream_V_strb_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_out_stream_V_strb_V);
		char* wrapc_stream_size_out_out_stream_V_strb_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_out_stream_V_strb_V);
		char* wrapc_stream_egress_status_out_stream_V_strb_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_out_stream_V_strb_V);

		// "out_stream_V_user_V"
		char* tvin_out_stream_V_user_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_out_stream_V_user_V);
		char* tvout_out_stream_V_user_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_out_stream_V_user_V);
		char* wrapc_stream_size_out_out_stream_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_out_stream_V_user_V);
		char* wrapc_stream_egress_status_out_stream_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_out_stream_V_user_V);

		// "out_stream_V_last_V"
		char* tvin_out_stream_V_last_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_out_stream_V_last_V);
		char* tvout_out_stream_V_last_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_out_stream_V_last_V);
		char* wrapc_stream_size_out_out_stream_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_out_stream_V_last_V);
		char* wrapc_stream_egress_status_out_stream_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_out_stream_V_last_V);

		// "out_stream_V_id_V"
		char* tvin_out_stream_V_id_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_out_stream_V_id_V);
		char* tvout_out_stream_V_id_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_out_stream_V_id_V);
		char* wrapc_stream_size_out_out_stream_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_out_stream_V_id_V);
		char* wrapc_stream_egress_status_out_stream_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_out_stream_V_id_V);

		// "out_stream_V_dest_V"
		char* tvin_out_stream_V_dest_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_out_stream_V_dest_V);
		char* tvout_out_stream_V_dest_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_out_stream_V_dest_V);
		char* wrapc_stream_size_out_out_stream_V_dest_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_out_stream_V_dest_V);
		char* wrapc_stream_egress_status_out_stream_V_dest_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_out_stream_V_dest_V);

		// "n_pixels_in_bus"
		char* tvin_n_pixels_in_bus = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_n_pixels_in_bus);

		// "N_BG"
		char* tvin_N_BG = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_N_BG);

		// "LOW_THRESH"
		char* tvin_LOW_THRESH = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_LOW_THRESH);

		// "double_trig"
		char* tvout_double_trig = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_double_trig);

		// "trig_data"
		char* tvout_trig_data = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_trig_data);

		// "trig_pixel"
		char* tvout_trig_pixel = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_trig_pixel);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// dump stream tvin: "in_stream"
		std::vector<ap_axis<32, 2, 5, 6 > > aesl_tmp_0;
		int aesl_tmp_1 = 0;
		while (!in_stream.empty())
		{
			aesl_tmp_0.push_back(in_stream.read());
			aesl_tmp_1++;
		}

		// dump stream tvin: "out_stream"
		std::vector<ap_axis<64, 2, 5, 6 > > aesl_tmp_3;
		int aesl_tmp_4 = 0;
		while (!out_stream.empty())
		{
			aesl_tmp_3.push_back(out_stream.read());
			aesl_tmp_4++;
		}

		// [[transaction]]
		sprintf(tvin_n_pixels_in_bus, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_n_pixels_in_bus, tvin_n_pixels_in_bus);

		sc_bv<16> n_pixels_in_bus_tvin_wrapc_buffer;

		// RTL Name: n_pixels_in_bus
		{
			// bitslice(15, 0)
			{
				// celement: n_pixels_in_bus(15, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : n_pixels_in_bus
						// sub_1st_elem          : 
						// ori_name_1st_elem     : n_pixels_in_bus
						// regulate_c_name       : n_pixels_in_bus
						// input_type_conversion : n_pixels_in_bus
						if (&(n_pixels_in_bus) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> n_pixels_in_bus_tmp_mem;
							n_pixels_in_bus_tmp_mem = n_pixels_in_bus;
							n_pixels_in_bus_tvin_wrapc_buffer.range(15, 0) = n_pixels_in_bus_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_n_pixels_in_bus, "%s\n", (n_pixels_in_bus_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_n_pixels_in_bus, tvin_n_pixels_in_bus);
		}

		tcl_file.set_num(1, &tcl_file.n_pixels_in_bus_depth);
		sprintf(tvin_n_pixels_in_bus, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_n_pixels_in_bus, tvin_n_pixels_in_bus);

		// [[transaction]]
		sprintf(tvin_N_BG, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_N_BG, tvin_N_BG);

		sc_bv<8> N_BG_tvin_wrapc_buffer;

		// RTL Name: N_BG
		{
			// bitslice(7, 0)
			{
				// celement: N_BG(7, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : N_BG
						// sub_1st_elem          : 
						// ori_name_1st_elem     : N_BG
						// regulate_c_name       : N_BG
						// input_type_conversion : N_BG
						if (&(N_BG) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> N_BG_tmp_mem;
							N_BG_tmp_mem = N_BG;
							N_BG_tvin_wrapc_buffer.range(7, 0) = N_BG_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_N_BG, "%s\n", (N_BG_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_N_BG, tvin_N_BG);
		}

		tcl_file.set_num(1, &tcl_file.N_BG_depth);
		sprintf(tvin_N_BG, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_N_BG, tvin_N_BG);

		// [[transaction]]
		sprintf(tvin_LOW_THRESH, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_LOW_THRESH, tvin_LOW_THRESH);

		sc_bv<32> LOW_THRESH_tvin_wrapc_buffer;

		// RTL Name: LOW_THRESH
		{
			// bitslice(31, 0)
			{
				// celement: LOW_THRESH(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : LOW_THRESH
						// sub_1st_elem          : 
						// ori_name_1st_elem     : LOW_THRESH
						// regulate_c_name       : LOW_THRESH
						// input_type_conversion : LOW_THRESH
						if (&(LOW_THRESH) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> LOW_THRESH_tmp_mem;
							LOW_THRESH_tmp_mem = LOW_THRESH;
							LOW_THRESH_tvin_wrapc_buffer.range(31, 0) = LOW_THRESH_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_LOW_THRESH, "%s\n", (LOW_THRESH_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_LOW_THRESH, tvin_LOW_THRESH);
		}

		tcl_file.set_num(1, &tcl_file.LOW_THRESH_depth);
		sprintf(tvin_LOW_THRESH, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_LOW_THRESH, tvin_LOW_THRESH);

		// push back input stream: "in_stream"
		for (int i = 0; i < aesl_tmp_1; i++)
		{
			in_stream.write(aesl_tmp_0[i]);
		}

		// push back input stream: "out_stream"
		for (int i = 0; i < aesl_tmp_4; i++)
		{
			out_stream.write(aesl_tmp_3[i]);
		}

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		AESL_ORIG_DUT_l2_trigger(in_stream, out_stream, n_pixels_in_bus, N_BG, LOW_THRESH, double_trig, trig_data, trig_pixel);

		CodeState = DUMP_OUTPUTS;
		// record input size to tv3: "in_stream"
		int aesl_tmp_2 = in_stream.size();

		// pop output stream: "out_stream"
		int aesl_tmp_5 = aesl_tmp_4;
		aesl_tmp_4 = 0;
     aesl_tmp_3.clear();
		while (!out_stream.empty())
		{
			aesl_tmp_3.push_back(out_stream.read());
			aesl_tmp_4++;
		}

		// [[transaction]]
		sprintf(tvin_in_stream_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_in_stream_V_data_V, tvin_in_stream_V_data_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_data_V, tvin_in_stream_V_data_V);

		sc_bv<32>* in_stream_V_data_V_tvin_wrapc_buffer = new sc_bv<32>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: in_stream_V_data_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: in_stream.V.data.V(31, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].data
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].data
							// regulate_c_name       : in_stream_V_data_V
							// input_type_conversion : (aesl_tmp_0[i_0].data).to_string(2).c_str()
							if (&(aesl_tmp_0[0].data) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> in_stream_V_data_V_tmp_mem;
								in_stream_V_data_V_tmp_mem = (aesl_tmp_0[i_0].data).to_string(2).c_str();
								in_stream_V_data_V_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = in_stream_V_data_V_tmp_mem.range(31, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_in_stream_V_data_V, "%s\n", (in_stream_V_data_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_in_stream_V_data_V, tvin_in_stream_V_data_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_in_stream_V_data_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_data_V, stream_ingress_size_in_stream_V_data_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_data_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_in_stream_V_data_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_data_V, stream_ingress_size_in_stream_V_data_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_data_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.in_stream_V_data_V_depth);
		sprintf(tvin_in_stream_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_in_stream_V_data_V, tvin_in_stream_V_data_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_data_V, tvin_in_stream_V_data_V);

		// release memory allocation
		delete [] in_stream_V_data_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_in_stream_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_data_V, wrapc_stream_size_in_in_stream_V_data_V);
		sprintf(wrapc_stream_size_in_in_stream_V_data_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_data_V, wrapc_stream_size_in_in_stream_V_data_V);
		sprintf(wrapc_stream_size_in_in_stream_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_data_V, wrapc_stream_size_in_in_stream_V_data_V);

		// [[transaction]]
		sprintf(tvin_in_stream_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_in_stream_V_keep_V, tvin_in_stream_V_keep_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_keep_V, tvin_in_stream_V_keep_V);

		sc_bv<4>* in_stream_V_keep_V_tvin_wrapc_buffer = new sc_bv<4>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: in_stream_V_keep_V
		{
			// bitslice(3, 0)
			{
				int hls_map_index = 0;
				// celement: in_stream.V.keep.V(3, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].keep
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].keep
							// regulate_c_name       : in_stream_V_keep_V
							// input_type_conversion : (aesl_tmp_0[i_0].keep).to_string(2).c_str()
							if (&(aesl_tmp_0[0].keep) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<4> in_stream_V_keep_V_tmp_mem;
								in_stream_V_keep_V_tmp_mem = (aesl_tmp_0[i_0].keep).to_string(2).c_str();
								in_stream_V_keep_V_tvin_wrapc_buffer[hls_map_index++].range(3, 0) = in_stream_V_keep_V_tmp_mem.range(3, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_in_stream_V_keep_V, "%s\n", (in_stream_V_keep_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_in_stream_V_keep_V, tvin_in_stream_V_keep_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_in_stream_V_keep_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_keep_V, stream_ingress_size_in_stream_V_keep_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_keep_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_in_stream_V_keep_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_keep_V, stream_ingress_size_in_stream_V_keep_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_keep_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.in_stream_V_keep_V_depth);
		sprintf(tvin_in_stream_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_in_stream_V_keep_V, tvin_in_stream_V_keep_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_keep_V, tvin_in_stream_V_keep_V);

		// release memory allocation
		delete [] in_stream_V_keep_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_in_stream_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_keep_V, wrapc_stream_size_in_in_stream_V_keep_V);
		sprintf(wrapc_stream_size_in_in_stream_V_keep_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_keep_V, wrapc_stream_size_in_in_stream_V_keep_V);
		sprintf(wrapc_stream_size_in_in_stream_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_keep_V, wrapc_stream_size_in_in_stream_V_keep_V);

		// [[transaction]]
		sprintf(tvin_in_stream_V_strb_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_in_stream_V_strb_V, tvin_in_stream_V_strb_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_strb_V, tvin_in_stream_V_strb_V);

		sc_bv<4>* in_stream_V_strb_V_tvin_wrapc_buffer = new sc_bv<4>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: in_stream_V_strb_V
		{
			// bitslice(3, 0)
			{
				int hls_map_index = 0;
				// celement: in_stream.V.strb.V(3, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].strb
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].strb
							// regulate_c_name       : in_stream_V_strb_V
							// input_type_conversion : (aesl_tmp_0[i_0].strb).to_string(2).c_str()
							if (&(aesl_tmp_0[0].strb) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<4> in_stream_V_strb_V_tmp_mem;
								in_stream_V_strb_V_tmp_mem = (aesl_tmp_0[i_0].strb).to_string(2).c_str();
								in_stream_V_strb_V_tvin_wrapc_buffer[hls_map_index++].range(3, 0) = in_stream_V_strb_V_tmp_mem.range(3, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_in_stream_V_strb_V, "%s\n", (in_stream_V_strb_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_in_stream_V_strb_V, tvin_in_stream_V_strb_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_in_stream_V_strb_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_strb_V, stream_ingress_size_in_stream_V_strb_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_strb_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_in_stream_V_strb_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_strb_V, stream_ingress_size_in_stream_V_strb_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_strb_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.in_stream_V_strb_V_depth);
		sprintf(tvin_in_stream_V_strb_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_in_stream_V_strb_V, tvin_in_stream_V_strb_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_strb_V, tvin_in_stream_V_strb_V);

		// release memory allocation
		delete [] in_stream_V_strb_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_in_stream_V_strb_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_strb_V, wrapc_stream_size_in_in_stream_V_strb_V);
		sprintf(wrapc_stream_size_in_in_stream_V_strb_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_strb_V, wrapc_stream_size_in_in_stream_V_strb_V);
		sprintf(wrapc_stream_size_in_in_stream_V_strb_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_strb_V, wrapc_stream_size_in_in_stream_V_strb_V);

		// [[transaction]]
		sprintf(tvin_in_stream_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_in_stream_V_user_V, tvin_in_stream_V_user_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_user_V, tvin_in_stream_V_user_V);

		sc_bv<2>* in_stream_V_user_V_tvin_wrapc_buffer = new sc_bv<2>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: in_stream_V_user_V
		{
			// bitslice(1, 0)
			{
				int hls_map_index = 0;
				// celement: in_stream.V.user.V(1, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].user
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].user
							// regulate_c_name       : in_stream_V_user_V
							// input_type_conversion : (aesl_tmp_0[i_0].user).to_string(2).c_str()
							if (&(aesl_tmp_0[0].user) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<2> in_stream_V_user_V_tmp_mem;
								in_stream_V_user_V_tmp_mem = (aesl_tmp_0[i_0].user).to_string(2).c_str();
								in_stream_V_user_V_tvin_wrapc_buffer[hls_map_index++].range(1, 0) = in_stream_V_user_V_tmp_mem.range(1, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_in_stream_V_user_V, "%s\n", (in_stream_V_user_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_in_stream_V_user_V, tvin_in_stream_V_user_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_in_stream_V_user_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_user_V, stream_ingress_size_in_stream_V_user_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_user_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_in_stream_V_user_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_user_V, stream_ingress_size_in_stream_V_user_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_user_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.in_stream_V_user_V_depth);
		sprintf(tvin_in_stream_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_in_stream_V_user_V, tvin_in_stream_V_user_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_user_V, tvin_in_stream_V_user_V);

		// release memory allocation
		delete [] in_stream_V_user_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_in_stream_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_user_V, wrapc_stream_size_in_in_stream_V_user_V);
		sprintf(wrapc_stream_size_in_in_stream_V_user_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_user_V, wrapc_stream_size_in_in_stream_V_user_V);
		sprintf(wrapc_stream_size_in_in_stream_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_user_V, wrapc_stream_size_in_in_stream_V_user_V);

		// [[transaction]]
		sprintf(tvin_in_stream_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_in_stream_V_last_V, tvin_in_stream_V_last_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_last_V, tvin_in_stream_V_last_V);

		sc_bv<1>* in_stream_V_last_V_tvin_wrapc_buffer = new sc_bv<1>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: in_stream_V_last_V
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: in_stream.V.last.V(0, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].last
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].last
							// regulate_c_name       : in_stream_V_last_V
							// input_type_conversion : (aesl_tmp_0[i_0].last).to_string(2).c_str()
							if (&(aesl_tmp_0[0].last) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<1> in_stream_V_last_V_tmp_mem;
								in_stream_V_last_V_tmp_mem = (aesl_tmp_0[i_0].last).to_string(2).c_str();
								in_stream_V_last_V_tvin_wrapc_buffer[hls_map_index++].range(0, 0) = in_stream_V_last_V_tmp_mem.range(0, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_in_stream_V_last_V, "%s\n", (in_stream_V_last_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_in_stream_V_last_V, tvin_in_stream_V_last_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_in_stream_V_last_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_last_V, stream_ingress_size_in_stream_V_last_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_last_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_in_stream_V_last_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_last_V, stream_ingress_size_in_stream_V_last_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_last_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.in_stream_V_last_V_depth);
		sprintf(tvin_in_stream_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_in_stream_V_last_V, tvin_in_stream_V_last_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_last_V, tvin_in_stream_V_last_V);

		// release memory allocation
		delete [] in_stream_V_last_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_in_stream_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_last_V, wrapc_stream_size_in_in_stream_V_last_V);
		sprintf(wrapc_stream_size_in_in_stream_V_last_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_last_V, wrapc_stream_size_in_in_stream_V_last_V);
		sprintf(wrapc_stream_size_in_in_stream_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_last_V, wrapc_stream_size_in_in_stream_V_last_V);

		// [[transaction]]
		sprintf(tvin_in_stream_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_in_stream_V_id_V, tvin_in_stream_V_id_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_id_V, tvin_in_stream_V_id_V);

		sc_bv<5>* in_stream_V_id_V_tvin_wrapc_buffer = new sc_bv<5>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: in_stream_V_id_V
		{
			// bitslice(4, 0)
			{
				int hls_map_index = 0;
				// celement: in_stream.V.id.V(4, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].id
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].id
							// regulate_c_name       : in_stream_V_id_V
							// input_type_conversion : (aesl_tmp_0[i_0].id).to_string(2).c_str()
							if (&(aesl_tmp_0[0].id) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<5> in_stream_V_id_V_tmp_mem;
								in_stream_V_id_V_tmp_mem = (aesl_tmp_0[i_0].id).to_string(2).c_str();
								in_stream_V_id_V_tvin_wrapc_buffer[hls_map_index++].range(4, 0) = in_stream_V_id_V_tmp_mem.range(4, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_in_stream_V_id_V, "%s\n", (in_stream_V_id_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_in_stream_V_id_V, tvin_in_stream_V_id_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_in_stream_V_id_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_id_V, stream_ingress_size_in_stream_V_id_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_id_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_in_stream_V_id_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_id_V, stream_ingress_size_in_stream_V_id_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_id_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.in_stream_V_id_V_depth);
		sprintf(tvin_in_stream_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_in_stream_V_id_V, tvin_in_stream_V_id_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_id_V, tvin_in_stream_V_id_V);

		// release memory allocation
		delete [] in_stream_V_id_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_in_stream_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_id_V, wrapc_stream_size_in_in_stream_V_id_V);
		sprintf(wrapc_stream_size_in_in_stream_V_id_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_id_V, wrapc_stream_size_in_in_stream_V_id_V);
		sprintf(wrapc_stream_size_in_in_stream_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_id_V, wrapc_stream_size_in_in_stream_V_id_V);

		// [[transaction]]
		sprintf(tvin_in_stream_V_dest_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_in_stream_V_dest_V, tvin_in_stream_V_dest_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_dest_V, tvin_in_stream_V_dest_V);

		sc_bv<6>* in_stream_V_dest_V_tvin_wrapc_buffer = new sc_bv<6>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: in_stream_V_dest_V
		{
			// bitslice(5, 0)
			{
				int hls_map_index = 0;
				// celement: in_stream.V.dest.V(5, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].dest
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].dest
							// regulate_c_name       : in_stream_V_dest_V
							// input_type_conversion : (aesl_tmp_0[i_0].dest).to_string(2).c_str()
							if (&(aesl_tmp_0[0].dest) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<6> in_stream_V_dest_V_tmp_mem;
								in_stream_V_dest_V_tmp_mem = (aesl_tmp_0[i_0].dest).to_string(2).c_str();
								in_stream_V_dest_V_tvin_wrapc_buffer[hls_map_index++].range(5, 0) = in_stream_V_dest_V_tmp_mem.range(5, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_in_stream_V_dest_V, "%s\n", (in_stream_V_dest_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_in_stream_V_dest_V, tvin_in_stream_V_dest_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_in_stream_V_dest_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_dest_V, stream_ingress_size_in_stream_V_dest_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_dest_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_in_stream_V_dest_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_dest_V, stream_ingress_size_in_stream_V_dest_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_dest_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.in_stream_V_dest_V_depth);
		sprintf(tvin_in_stream_V_dest_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_in_stream_V_dest_V, tvin_in_stream_V_dest_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_in_stream_V_dest_V, tvin_in_stream_V_dest_V);

		// release memory allocation
		delete [] in_stream_V_dest_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_in_stream_V_dest_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_dest_V, wrapc_stream_size_in_in_stream_V_dest_V);
		sprintf(wrapc_stream_size_in_in_stream_V_dest_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_dest_V, wrapc_stream_size_in_in_stream_V_dest_V);
		sprintf(wrapc_stream_size_in_in_stream_V_dest_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_in_stream_V_dest_V, wrapc_stream_size_in_in_stream_V_dest_V);

		// [[transaction]]
		sprintf(tvout_out_stream_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_out_stream_V_data_V, tvout_out_stream_V_data_V);

		sc_bv<64>* out_stream_V_data_V_tvout_wrapc_buffer = new sc_bv<64>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: out_stream_V_data_V
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: out_stream.V.data.V(63, 0)
				{
					// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
					for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].data
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].data
							// regulate_c_name       : out_stream_V_data_V
							// input_type_conversion : (aesl_tmp_3[i_0].data).to_string(2).c_str()
							if (&(aesl_tmp_3[0].data) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<64> out_stream_V_data_V_tmp_mem;
								out_stream_V_data_V_tmp_mem = (aesl_tmp_3[i_0].data).to_string(2).c_str();
								out_stream_V_data_V_tvout_wrapc_buffer[hls_map_index++].range(63, 0) = out_stream_V_data_V_tmp_mem.range(63, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvout_out_stream_V_data_V, "%s\n", (out_stream_V_data_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_out_stream_V_data_V, tvout_out_stream_V_data_V);
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.out_stream_V_data_V_depth);
		sprintf(tvout_out_stream_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_out_stream_V_data_V, tvout_out_stream_V_data_V);

		// release memory allocation
		delete [] out_stream_V_data_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_out_stream_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_data_V, wrapc_stream_size_out_out_stream_V_data_V);
		sprintf(wrapc_stream_size_out_out_stream_V_data_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_data_V, wrapc_stream_size_out_out_stream_V_data_V);
		sprintf(wrapc_stream_size_out_out_stream_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_data_V, wrapc_stream_size_out_out_stream_V_data_V);

		// [[transaction]]
		sprintf(tvout_out_stream_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_out_stream_V_keep_V, tvout_out_stream_V_keep_V);

		sc_bv<8>* out_stream_V_keep_V_tvout_wrapc_buffer = new sc_bv<8>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: out_stream_V_keep_V
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: out_stream.V.keep.V(7, 0)
				{
					// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
					for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].keep
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].keep
							// regulate_c_name       : out_stream_V_keep_V
							// input_type_conversion : (aesl_tmp_3[i_0].keep).to_string(2).c_str()
							if (&(aesl_tmp_3[0].keep) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<8> out_stream_V_keep_V_tmp_mem;
								out_stream_V_keep_V_tmp_mem = (aesl_tmp_3[i_0].keep).to_string(2).c_str();
								out_stream_V_keep_V_tvout_wrapc_buffer[hls_map_index++].range(7, 0) = out_stream_V_keep_V_tmp_mem.range(7, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvout_out_stream_V_keep_V, "%s\n", (out_stream_V_keep_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_out_stream_V_keep_V, tvout_out_stream_V_keep_V);
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.out_stream_V_keep_V_depth);
		sprintf(tvout_out_stream_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_out_stream_V_keep_V, tvout_out_stream_V_keep_V);

		// release memory allocation
		delete [] out_stream_V_keep_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_out_stream_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_keep_V, wrapc_stream_size_out_out_stream_V_keep_V);
		sprintf(wrapc_stream_size_out_out_stream_V_keep_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_keep_V, wrapc_stream_size_out_out_stream_V_keep_V);
		sprintf(wrapc_stream_size_out_out_stream_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_keep_V, wrapc_stream_size_out_out_stream_V_keep_V);

		// [[transaction]]
		sprintf(tvout_out_stream_V_strb_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_out_stream_V_strb_V, tvout_out_stream_V_strb_V);

		sc_bv<8>* out_stream_V_strb_V_tvout_wrapc_buffer = new sc_bv<8>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: out_stream_V_strb_V
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: out_stream.V.strb.V(7, 0)
				{
					// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
					for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].strb
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].strb
							// regulate_c_name       : out_stream_V_strb_V
							// input_type_conversion : (aesl_tmp_3[i_0].strb).to_string(2).c_str()
							if (&(aesl_tmp_3[0].strb) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<8> out_stream_V_strb_V_tmp_mem;
								out_stream_V_strb_V_tmp_mem = (aesl_tmp_3[i_0].strb).to_string(2).c_str();
								out_stream_V_strb_V_tvout_wrapc_buffer[hls_map_index++].range(7, 0) = out_stream_V_strb_V_tmp_mem.range(7, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvout_out_stream_V_strb_V, "%s\n", (out_stream_V_strb_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_out_stream_V_strb_V, tvout_out_stream_V_strb_V);
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.out_stream_V_strb_V_depth);
		sprintf(tvout_out_stream_V_strb_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_out_stream_V_strb_V, tvout_out_stream_V_strb_V);

		// release memory allocation
		delete [] out_stream_V_strb_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_out_stream_V_strb_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_strb_V, wrapc_stream_size_out_out_stream_V_strb_V);
		sprintf(wrapc_stream_size_out_out_stream_V_strb_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_strb_V, wrapc_stream_size_out_out_stream_V_strb_V);
		sprintf(wrapc_stream_size_out_out_stream_V_strb_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_strb_V, wrapc_stream_size_out_out_stream_V_strb_V);

		// [[transaction]]
		sprintf(tvout_out_stream_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_out_stream_V_user_V, tvout_out_stream_V_user_V);

		sc_bv<2>* out_stream_V_user_V_tvout_wrapc_buffer = new sc_bv<2>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: out_stream_V_user_V
		{
			// bitslice(1, 0)
			{
				int hls_map_index = 0;
				// celement: out_stream.V.user.V(1, 0)
				{
					// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
					for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].user
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].user
							// regulate_c_name       : out_stream_V_user_V
							// input_type_conversion : (aesl_tmp_3[i_0].user).to_string(2).c_str()
							if (&(aesl_tmp_3[0].user) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<2> out_stream_V_user_V_tmp_mem;
								out_stream_V_user_V_tmp_mem = (aesl_tmp_3[i_0].user).to_string(2).c_str();
								out_stream_V_user_V_tvout_wrapc_buffer[hls_map_index++].range(1, 0) = out_stream_V_user_V_tmp_mem.range(1, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvout_out_stream_V_user_V, "%s\n", (out_stream_V_user_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_out_stream_V_user_V, tvout_out_stream_V_user_V);
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.out_stream_V_user_V_depth);
		sprintf(tvout_out_stream_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_out_stream_V_user_V, tvout_out_stream_V_user_V);

		// release memory allocation
		delete [] out_stream_V_user_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_out_stream_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_user_V, wrapc_stream_size_out_out_stream_V_user_V);
		sprintf(wrapc_stream_size_out_out_stream_V_user_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_user_V, wrapc_stream_size_out_out_stream_V_user_V);
		sprintf(wrapc_stream_size_out_out_stream_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_user_V, wrapc_stream_size_out_out_stream_V_user_V);

		// [[transaction]]
		sprintf(tvout_out_stream_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_out_stream_V_last_V, tvout_out_stream_V_last_V);

		sc_bv<1>* out_stream_V_last_V_tvout_wrapc_buffer = new sc_bv<1>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: out_stream_V_last_V
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: out_stream.V.last.V(0, 0)
				{
					// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
					for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].last
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].last
							// regulate_c_name       : out_stream_V_last_V
							// input_type_conversion : (aesl_tmp_3[i_0].last).to_string(2).c_str()
							if (&(aesl_tmp_3[0].last) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<1> out_stream_V_last_V_tmp_mem;
								out_stream_V_last_V_tmp_mem = (aesl_tmp_3[i_0].last).to_string(2).c_str();
								out_stream_V_last_V_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = out_stream_V_last_V_tmp_mem.range(0, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvout_out_stream_V_last_V, "%s\n", (out_stream_V_last_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_out_stream_V_last_V, tvout_out_stream_V_last_V);
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.out_stream_V_last_V_depth);
		sprintf(tvout_out_stream_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_out_stream_V_last_V, tvout_out_stream_V_last_V);

		// release memory allocation
		delete [] out_stream_V_last_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_out_stream_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_last_V, wrapc_stream_size_out_out_stream_V_last_V);
		sprintf(wrapc_stream_size_out_out_stream_V_last_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_last_V, wrapc_stream_size_out_out_stream_V_last_V);
		sprintf(wrapc_stream_size_out_out_stream_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_last_V, wrapc_stream_size_out_out_stream_V_last_V);

		// [[transaction]]
		sprintf(tvout_out_stream_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_out_stream_V_id_V, tvout_out_stream_V_id_V);

		sc_bv<5>* out_stream_V_id_V_tvout_wrapc_buffer = new sc_bv<5>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: out_stream_V_id_V
		{
			// bitslice(4, 0)
			{
				int hls_map_index = 0;
				// celement: out_stream.V.id.V(4, 0)
				{
					// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
					for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].id
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].id
							// regulate_c_name       : out_stream_V_id_V
							// input_type_conversion : (aesl_tmp_3[i_0].id).to_string(2).c_str()
							if (&(aesl_tmp_3[0].id) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<5> out_stream_V_id_V_tmp_mem;
								out_stream_V_id_V_tmp_mem = (aesl_tmp_3[i_0].id).to_string(2).c_str();
								out_stream_V_id_V_tvout_wrapc_buffer[hls_map_index++].range(4, 0) = out_stream_V_id_V_tmp_mem.range(4, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvout_out_stream_V_id_V, "%s\n", (out_stream_V_id_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_out_stream_V_id_V, tvout_out_stream_V_id_V);
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.out_stream_V_id_V_depth);
		sprintf(tvout_out_stream_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_out_stream_V_id_V, tvout_out_stream_V_id_V);

		// release memory allocation
		delete [] out_stream_V_id_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_out_stream_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_id_V, wrapc_stream_size_out_out_stream_V_id_V);
		sprintf(wrapc_stream_size_out_out_stream_V_id_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_id_V, wrapc_stream_size_out_out_stream_V_id_V);
		sprintf(wrapc_stream_size_out_out_stream_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_id_V, wrapc_stream_size_out_out_stream_V_id_V);

		// [[transaction]]
		sprintf(tvout_out_stream_V_dest_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_out_stream_V_dest_V, tvout_out_stream_V_dest_V);

		sc_bv<6>* out_stream_V_dest_V_tvout_wrapc_buffer = new sc_bv<6>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: out_stream_V_dest_V
		{
			// bitslice(5, 0)
			{
				int hls_map_index = 0;
				// celement: out_stream.V.dest.V(5, 0)
				{
					// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
					for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].dest
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].dest
							// regulate_c_name       : out_stream_V_dest_V
							// input_type_conversion : (aesl_tmp_3[i_0].dest).to_string(2).c_str()
							if (&(aesl_tmp_3[0].dest) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<6> out_stream_V_dest_V_tmp_mem;
								out_stream_V_dest_V_tmp_mem = (aesl_tmp_3[i_0].dest).to_string(2).c_str();
								out_stream_V_dest_V_tvout_wrapc_buffer[hls_map_index++].range(5, 0) = out_stream_V_dest_V_tmp_mem.range(5, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvout_out_stream_V_dest_V, "%s\n", (out_stream_V_dest_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_out_stream_V_dest_V, tvout_out_stream_V_dest_V);
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.out_stream_V_dest_V_depth);
		sprintf(tvout_out_stream_V_dest_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_out_stream_V_dest_V, tvout_out_stream_V_dest_V);

		// release memory allocation
		delete [] out_stream_V_dest_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_out_stream_V_dest_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_dest_V, wrapc_stream_size_out_out_stream_V_dest_V);
		sprintf(wrapc_stream_size_out_out_stream_V_dest_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_dest_V, wrapc_stream_size_out_out_stream_V_dest_V);
		sprintf(wrapc_stream_size_out_out_stream_V_dest_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_out_stream_V_dest_V, wrapc_stream_size_out_out_stream_V_dest_V);

		// [[transaction]]
		sprintf(tvout_double_trig, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_double_trig, tvout_double_trig);

		sc_bv<32>* double_trig_tvout_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: double_trig
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: double_trig(31, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : double_trig[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : double_trig[0]
						// regulate_c_name       : double_trig
						// input_type_conversion : double_trig[i_0]
						if (&(double_trig[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> double_trig_tmp_mem;
							double_trig_tmp_mem = double_trig[i_0];
							double_trig_tvout_wrapc_buffer[hls_map_index++].range(31, 0) = double_trig_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_double_trig, "%s\n", (double_trig_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_double_trig, tvout_double_trig);
		}

		tcl_file.set_num(1, &tcl_file.double_trig_depth);
		sprintf(tvout_double_trig, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_double_trig, tvout_double_trig);

		// release memory allocation
		delete [] double_trig_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_trig_data, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_trig_data, tvout_trig_data);

		sc_bv<32>* trig_data_tvout_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: trig_data
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: trig_data(31, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : trig_data[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : trig_data[0]
						// regulate_c_name       : trig_data
						// input_type_conversion : trig_data[i_0]
						if (&(trig_data[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> trig_data_tmp_mem;
							trig_data_tmp_mem = trig_data[i_0];
							trig_data_tvout_wrapc_buffer[hls_map_index++].range(31, 0) = trig_data_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_trig_data, "%s\n", (trig_data_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_trig_data, tvout_trig_data);
		}

		tcl_file.set_num(1, &tcl_file.trig_data_depth);
		sprintf(tvout_trig_data, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_trig_data, tvout_trig_data);

		// release memory allocation
		delete [] trig_data_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_trig_pixel, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_trig_pixel, tvout_trig_pixel);

		sc_bv<32>* trig_pixel_tvout_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: trig_pixel
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: trig_pixel(31, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : trig_pixel[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : trig_pixel[0]
						// regulate_c_name       : trig_pixel
						// input_type_conversion : trig_pixel[i_0]
						if (&(trig_pixel[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> trig_pixel_tmp_mem;
							trig_pixel_tmp_mem = trig_pixel[i_0];
							trig_pixel_tvout_wrapc_buffer[hls_map_index++].range(31, 0) = trig_pixel_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_trig_pixel, "%s\n", (trig_pixel_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_trig_pixel, tvout_trig_pixel);
		}

		tcl_file.set_num(1, &tcl_file.trig_pixel_depth);
		sprintf(tvout_trig_pixel, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_trig_pixel, tvout_trig_pixel);

		// release memory allocation
		delete [] trig_pixel_tvout_wrapc_buffer;

		// push back output stream: "out_stream"
		for (int i = 0; i < aesl_tmp_4; i++)
		{
			out_stream.write(aesl_tmp_3[i]);
		}

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "in_stream_V_data_V"
		delete [] tvin_in_stream_V_data_V;
		delete [] wrapc_stream_size_in_in_stream_V_data_V;
		// release memory allocation: "in_stream_V_keep_V"
		delete [] tvin_in_stream_V_keep_V;
		delete [] wrapc_stream_size_in_in_stream_V_keep_V;
		// release memory allocation: "in_stream_V_strb_V"
		delete [] tvin_in_stream_V_strb_V;
		delete [] wrapc_stream_size_in_in_stream_V_strb_V;
		// release memory allocation: "in_stream_V_user_V"
		delete [] tvin_in_stream_V_user_V;
		delete [] wrapc_stream_size_in_in_stream_V_user_V;
		// release memory allocation: "in_stream_V_last_V"
		delete [] tvin_in_stream_V_last_V;
		delete [] wrapc_stream_size_in_in_stream_V_last_V;
		// release memory allocation: "in_stream_V_id_V"
		delete [] tvin_in_stream_V_id_V;
		delete [] wrapc_stream_size_in_in_stream_V_id_V;
		// release memory allocation: "in_stream_V_dest_V"
		delete [] tvin_in_stream_V_dest_V;
		delete [] wrapc_stream_size_in_in_stream_V_dest_V;
		// release memory allocation: "out_stream_V_data_V"
		delete [] tvout_out_stream_V_data_V;
		delete [] tvin_out_stream_V_data_V;
		delete [] wrapc_stream_size_out_out_stream_V_data_V;
		// release memory allocation: "out_stream_V_keep_V"
		delete [] tvout_out_stream_V_keep_V;
		delete [] tvin_out_stream_V_keep_V;
		delete [] wrapc_stream_size_out_out_stream_V_keep_V;
		// release memory allocation: "out_stream_V_strb_V"
		delete [] tvout_out_stream_V_strb_V;
		delete [] tvin_out_stream_V_strb_V;
		delete [] wrapc_stream_size_out_out_stream_V_strb_V;
		// release memory allocation: "out_stream_V_user_V"
		delete [] tvout_out_stream_V_user_V;
		delete [] tvin_out_stream_V_user_V;
		delete [] wrapc_stream_size_out_out_stream_V_user_V;
		// release memory allocation: "out_stream_V_last_V"
		delete [] tvout_out_stream_V_last_V;
		delete [] tvin_out_stream_V_last_V;
		delete [] wrapc_stream_size_out_out_stream_V_last_V;
		// release memory allocation: "out_stream_V_id_V"
		delete [] tvout_out_stream_V_id_V;
		delete [] tvin_out_stream_V_id_V;
		delete [] wrapc_stream_size_out_out_stream_V_id_V;
		// release memory allocation: "out_stream_V_dest_V"
		delete [] tvout_out_stream_V_dest_V;
		delete [] tvin_out_stream_V_dest_V;
		delete [] wrapc_stream_size_out_out_stream_V_dest_V;
		// release memory allocation: "n_pixels_in_bus"
		delete [] tvin_n_pixels_in_bus;
		// release memory allocation: "N_BG"
		delete [] tvin_N_BG;
		// release memory allocation: "LOW_THRESH"
		delete [] tvin_LOW_THRESH;
		// release memory allocation: "double_trig"
		delete [] tvout_double_trig;
		// release memory allocation: "trig_data"
		delete [] tvout_trig_data;
		// release memory allocation: "trig_pixel"
		delete [] tvout_trig_pixel;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

