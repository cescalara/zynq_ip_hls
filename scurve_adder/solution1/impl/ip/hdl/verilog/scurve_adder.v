// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="scurve_adder,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.047000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=431,HLS_SYN_LUT=387}" *)

module scurve_adder (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_st1_fsm_0 = 8'b1;
parameter    ap_ST_st2_fsm_1 = 8'b10;
parameter    ap_ST_st3_fsm_2 = 8'b100;
parameter    ap_ST_pp1_stg0_fsm_3 = 8'b1000;
parameter    ap_ST_st9_fsm_4 = 8'b10000;
parameter    ap_ST_st10_fsm_5 = 8'b100000;
parameter    ap_ST_pp2_stg0_fsm_6 = 8'b1000000;
parameter    ap_ST_st13_fsm_7 = 8'b10000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_6 = 32'b110;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv35_0 = 35'b00000000000000000000000000000000000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv35_1 = 35'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv32_7 = 32'b111;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (C_S_AXI_CTRL_BUS_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input  [15:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [1:0] inStream_TKEEP;
input  [1:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [31:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [3:0] outStream_TKEEP;
output  [3:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1 : 0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1 : 0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1 : 0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

reg inStream_TREADY;
reg outStream_TVALID;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_25;
reg    ap_ready;
wire   [31:0] param;
reg    inStream_TDATA_blk_n;
reg    ap_sig_cseq_ST_pp1_stg0_fsm_3;
reg    ap_sig_57;
reg    ap_reg_ppiten_pp1_it0;
reg    ap_reg_ppiten_pp1_it1;
reg    ap_reg_ppiten_pp1_it2;
reg    ap_reg_ppiten_pp1_it3;
reg    ap_reg_ppiten_pp1_it4;
wire   [0:0] exitcond_flatten_fu_436_p2;
reg    outStream_TDATA_blk_n;
reg    ap_sig_cseq_ST_pp2_stg0_fsm_6;
reg    ap_sig_80;
reg    ap_reg_ppiten_pp2_it1;
reg    ap_reg_ppiten_pp2_it0;
reg   [0:0] exitcond_reg_753;
reg   [34:0] indvar_flatten_reg_378;
reg   [3:0] k_reg_389;
reg   [4:0] l_reg_400;
reg   [31:0] param_read_reg_584;
wire   [3:0] i_1_fu_417_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_144;
wire   [34:0] tmp_2_fu_429_p3;
reg   [34:0] tmp_2_reg_597;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_153;
reg   [0:0] exitcond_flatten_reg_602;
reg    ap_sig_158;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter1;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter2;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter3;
wire   [34:0] indvar_flatten_next_fu_441_p2;
wire   [3:0] k_mid2_fu_453_p3;
reg   [3:0] k_mid2_reg_611;
reg   [1:0] tmp_keep_V_reg_616;
reg   [1:0] tmp_strb_V_reg_621;
reg   [1:0] tmp_user_V_reg_626;
reg   [0:0] tmp_last_V_reg_631;
reg   [4:0] tmp_id_V_reg_636;
reg   [5:0] tmp_dest_V_reg_641;
wire   [7:0] tmp_6_fu_489_p1;
reg   [7:0] tmp_6_reg_646;
reg   [7:0] ap_reg_ppstg_tmp_6_reg_646_pp1_iter1;
reg   [7:0] ap_reg_ppstg_tmp_6_reg_646_pp1_iter2;
reg   [7:0] phitmp_reg_651;
reg   [7:0] ap_reg_ppstg_phitmp_reg_651_pp1_iter1;
reg   [7:0] ap_reg_ppstg_phitmp_reg_651_pp1_iter2;
wire   [3:0] k_1_fu_503_p2;
reg   [2:0] sum_pix1_addr_1_reg_661;
reg   [2:0] ap_reg_ppstg_sum_pix1_addr_1_reg_661_pp1_iter2;
reg   [2:0] ap_reg_ppstg_sum_pix1_addr_1_reg_661_pp1_iter3;
reg   [2:0] sum_pix2_addr_1_reg_667;
reg   [2:0] ap_reg_ppstg_sum_pix2_addr_1_reg_667_pp1_iter2;
reg   [2:0] ap_reg_ppstg_sum_pix2_addr_1_reg_667_pp1_iter3;
wire   [31:0] sum_pix1_q0;
reg   [31:0] sum_pix1_load_reg_673;
wire   [31:0] sum_pix2_q0;
reg   [31:0] sum_pix2_load_reg_678;
wire   [31:0] tmp_9_fu_523_p2;
reg   [31:0] tmp_9_reg_683;
wire   [31:0] tmp_1_fu_531_p2;
reg   [31:0] tmp_1_reg_688;
reg    ap_sig_cseq_ST_st9_fsm_4;
reg    ap_sig_229;
wire   [3:0] tmp_keep_V_1_fu_536_p1;
reg   [3:0] tmp_keep_V_1_reg_723;
reg    ap_sig_cseq_ST_st10_fsm_5;
reg    ap_sig_248;
wire   [3:0] tmp_strb_V_1_fu_540_p1;
reg   [3:0] tmp_strb_V_1_reg_728;
wire   [1:0] dub_pix_user_V_q0;
reg   [1:0] tmp_user_V_1_reg_733;
wire   [0:0] dub_pix_last_V_q0;
reg   [0:0] tmp_last_V_1_reg_738;
wire   [4:0] dub_pix_id_V_q0;
reg   [4:0] tmp_id_V_1_reg_743;
wire   [5:0] dub_pix_dest_V_q0;
reg   [5:0] tmp_dest_V_1_reg_748;
wire   [0:0] exitcond_fu_544_p2;
reg    ap_sig_ioackin_outStream_TREADY;
wire   [4:0] l_1_fu_550_p2;
wire   [0:0] tmp_11_fu_556_p1;
reg   [0:0] tmp_11_reg_762;
reg   [2:0] sum_pix1_address0;
reg    sum_pix1_ce0;
reg    sum_pix1_we0;
reg   [2:0] sum_pix1_address1;
reg    sum_pix1_ce1;
reg    sum_pix1_we1;
wire   [31:0] sum_pix1_q1;
reg   [2:0] sum_pix2_address0;
reg    sum_pix2_ce0;
reg    sum_pix2_we0;
reg   [2:0] sum_pix2_address1;
reg    sum_pix2_ce1;
reg    sum_pix2_we1;
wire   [31:0] sum_pix2_q1;
reg   [2:0] dub_pix_keep_V_address0;
reg    dub_pix_keep_V_ce0;
reg    dub_pix_keep_V_we0;
wire   [1:0] dub_pix_keep_V_q0;
reg   [2:0] dub_pix_strb_V_address0;
reg    dub_pix_strb_V_ce0;
reg    dub_pix_strb_V_we0;
wire   [1:0] dub_pix_strb_V_q0;
reg   [2:0] dub_pix_user_V_address0;
reg    dub_pix_user_V_ce0;
reg    dub_pix_user_V_we0;
reg   [2:0] dub_pix_last_V_address0;
reg    dub_pix_last_V_ce0;
reg    dub_pix_last_V_we0;
reg   [2:0] dub_pix_id_V_address0;
reg    dub_pix_id_V_ce0;
reg    dub_pix_id_V_we0;
reg   [2:0] dub_pix_dest_V_address0;
reg    dub_pix_dest_V_ce0;
reg    dub_pix_dest_V_we0;
reg   [3:0] i_reg_367;
wire   [0:0] exitcond1_fu_411_p2;
wire   [63:0] tmp_fu_423_p1;
wire   [63:0] tmp_4_fu_509_p1;
wire   [63:0] tmp_10_fu_570_p1;
reg    ap_reg_ioackin_outStream_TREADY;
wire   [0:0] exitcond2_fu_447_p2;
wire   [31:0] tmp_8_fu_520_p1;
wire   [31:0] tmp_s_fu_528_p1;
wire   [2:0] p_lshr_f_cast_fu_560_p4;
reg    ap_sig_cseq_ST_st13_fsm_7;
reg    ap_sig_566;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'b1;
#0 ap_reg_ppiten_pp1_it0 = 1'b0;
#0 ap_reg_ppiten_pp1_it1 = 1'b0;
#0 ap_reg_ppiten_pp1_it2 = 1'b0;
#0 ap_reg_ppiten_pp1_it3 = 1'b0;
#0 ap_reg_ppiten_pp1_it4 = 1'b0;
#0 ap_reg_ppiten_pp2_it1 = 1'b0;
#0 ap_reg_ppiten_pp2_it0 = 1'b0;
#0 ap_reg_ioackin_outStream_TREADY = 1'b0;
end

scurve_adder_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
scurve_adder_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .param(param)
);

scurve_adder_sum_pix1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sum_pix1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix1_address0),
    .ce0(sum_pix1_ce0),
    .we0(sum_pix1_we0),
    .d0(ap_const_lv32_0),
    .q0(sum_pix1_q0),
    .address1(sum_pix1_address1),
    .ce1(sum_pix1_ce1),
    .we1(sum_pix1_we1),
    .d1(tmp_9_reg_683),
    .q1(sum_pix1_q1)
);

scurve_adder_sum_pix1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sum_pix2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_pix2_address0),
    .ce0(sum_pix2_ce0),
    .we0(sum_pix2_we0),
    .d0(ap_const_lv32_0),
    .q0(sum_pix2_q0),
    .address1(sum_pix2_address1),
    .ce1(sum_pix2_ce1),
    .we1(sum_pix2_we1),
    .d1(tmp_1_reg_688),
    .q1(sum_pix2_q1)
);

scurve_adder_dub_pix_keep_V #(
    .DataWidth( 2 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dub_pix_keep_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dub_pix_keep_V_address0),
    .ce0(dub_pix_keep_V_ce0),
    .we0(dub_pix_keep_V_we0),
    .d0(tmp_keep_V_reg_616),
    .q0(dub_pix_keep_V_q0)
);

scurve_adder_dub_pix_keep_V #(
    .DataWidth( 2 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dub_pix_strb_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dub_pix_strb_V_address0),
    .ce0(dub_pix_strb_V_ce0),
    .we0(dub_pix_strb_V_we0),
    .d0(tmp_strb_V_reg_621),
    .q0(dub_pix_strb_V_q0)
);

scurve_adder_dub_pix_keep_V #(
    .DataWidth( 2 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dub_pix_user_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dub_pix_user_V_address0),
    .ce0(dub_pix_user_V_ce0),
    .we0(dub_pix_user_V_we0),
    .d0(tmp_user_V_reg_626),
    .q0(dub_pix_user_V_q0)
);

scurve_adder_dub_pix_last_V #(
    .DataWidth( 1 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dub_pix_last_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dub_pix_last_V_address0),
    .ce0(dub_pix_last_V_ce0),
    .we0(dub_pix_last_V_we0),
    .d0(tmp_last_V_reg_631),
    .q0(dub_pix_last_V_q0)
);

scurve_adder_dub_pix_id_V #(
    .DataWidth( 5 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dub_pix_id_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dub_pix_id_V_address0),
    .ce0(dub_pix_id_V_ce0),
    .we0(dub_pix_id_V_we0),
    .d0(tmp_id_V_reg_636),
    .q0(dub_pix_id_V_q0)
);

scurve_adder_dub_pix_dest_V #(
    .DataWidth( 6 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dub_pix_dest_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dub_pix_dest_V_address0),
    .ce0(dub_pix_dest_V_ce0),
    .we0(dub_pix_dest_V_we0),
    .d0(tmp_dest_V_reg_641),
    .q0(dub_pix_dest_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_outStream_TREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_6) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == exitcond_reg_753) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == exitcond_reg_753) & (1'b0 == ap_sig_ioackin_outStream_TREADY)))) begin
            ap_reg_ioackin_outStream_TREADY <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_6) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == exitcond_reg_753) & (1'b1 == outStream_TREADY))) begin
            ap_reg_ioackin_outStream_TREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158) & ~(exitcond_flatten_fu_436_p2 == 1'b0))) begin
            ap_reg_ppiten_pp1_it0 <= 1'b0;
        end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
            ap_reg_ppiten_pp1_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (exitcond_flatten_fu_436_p2 == 1'b0) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158))) begin
            ap_reg_ppiten_pp1_it1 <= 1'b1;
        end else if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158) & ~(exitcond_flatten_fu_436_p2 == 1'b0)))) begin
            ap_reg_ppiten_pp1_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158)) begin
            ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it3 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158)) begin
            ap_reg_ppiten_pp1_it3 <= ap_reg_ppiten_pp1_it2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it4 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158)) begin
            ap_reg_ppiten_pp1_it4 <= ap_reg_ppiten_pp1_it3;
        end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
            ap_reg_ppiten_pp1_it4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp2_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_6) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == exitcond_reg_753) & (1'b0 == ap_sig_ioackin_outStream_TREADY)) & ~(1'b0 == exitcond_fu_544_p2))) begin
            ap_reg_ppiten_pp2_it0 <= 1'b0;
        end else if ((1'b1 == ap_sig_cseq_ST_st10_fsm_5)) begin
            ap_reg_ppiten_pp2_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp2_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_6) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == exitcond_reg_753) & (1'b0 == ap_sig_ioackin_outStream_TREADY)) & (1'b0 == exitcond_fu_544_p2))) begin
            ap_reg_ppiten_pp2_it1 <= 1'b1;
        end else if (((1'b1 == ap_sig_cseq_ST_st10_fsm_5) | ((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_6) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == exitcond_reg_753) & (1'b0 == ap_sig_ioackin_outStream_TREADY)) & ~(1'b0 == exitcond_fu_544_p2)))) begin
            ap_reg_ppiten_pp2_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_367 <= ap_const_lv4_0;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_fu_411_p2))) begin
        i_reg_367 <= i_1_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it0) & (exitcond_flatten_fu_436_p2 == 1'b0) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158))) begin
        indvar_flatten_reg_378 <= indvar_flatten_next_fu_441_p2;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        indvar_flatten_reg_378 <= ap_const_lv35_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it0) & (exitcond_flatten_fu_436_p2 == 1'b0) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158))) begin
        k_reg_389 <= k_1_fu_503_p2;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        k_reg_389 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st10_fsm_5)) begin
        l_reg_400 <= ap_const_lv5_0;
    end else if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_6) & (1'b1 == ap_reg_ppiten_pp2_it0) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == exitcond_reg_753) & (1'b0 == ap_sig_ioackin_outStream_TREADY)) & (1'b0 == exitcond_fu_544_p2))) begin
        l_reg_400 <= l_1_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158))) begin
        ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter1 <= exitcond_flatten_reg_602;
        ap_reg_ppstg_phitmp_reg_651_pp1_iter1 <= phitmp_reg_651;
        ap_reg_ppstg_tmp_6_reg_646_pp1_iter1 <= tmp_6_reg_646;
        exitcond_flatten_reg_602 <= exitcond_flatten_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if (~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158)) begin
        ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter2 <= ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter1;
        ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter3 <= ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter2;
        ap_reg_ppstg_phitmp_reg_651_pp1_iter2 <= ap_reg_ppstg_phitmp_reg_651_pp1_iter1;
        ap_reg_ppstg_sum_pix1_addr_1_reg_661_pp1_iter2 <= sum_pix1_addr_1_reg_661;
        ap_reg_ppstg_sum_pix1_addr_1_reg_661_pp1_iter3 <= ap_reg_ppstg_sum_pix1_addr_1_reg_661_pp1_iter2;
        ap_reg_ppstg_sum_pix2_addr_1_reg_667_pp1_iter2 <= sum_pix2_addr_1_reg_667;
        ap_reg_ppstg_sum_pix2_addr_1_reg_667_pp1_iter3 <= ap_reg_ppstg_sum_pix2_addr_1_reg_667_pp1_iter2;
        ap_reg_ppstg_tmp_6_reg_646_pp1_iter2 <= ap_reg_ppstg_tmp_6_reg_646_pp1_iter1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_6) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == exitcond_reg_753) & (1'b0 == ap_sig_ioackin_outStream_TREADY)))) begin
        exitcond_reg_753 <= exitcond_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (exitcond_flatten_fu_436_p2 == 1'b0) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158))) begin
        k_mid2_reg_611 <= k_mid2_fu_453_p3;
        phitmp_reg_651 <= {{inStream_TDATA[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp_6_reg_646 <= tmp_6_fu_489_p1;
        tmp_dest_V_reg_641 <= inStream_TDEST;
        tmp_id_V_reg_636 <= inStream_TID;
        tmp_keep_V_reg_616 <= inStream_TKEEP;
        tmp_last_V_reg_631 <= inStream_TLAST;
        tmp_strb_V_reg_621 <= inStream_TSTRB;
        tmp_user_V_reg_626 <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        param_read_reg_584 <= param;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158) & (1'b0 == exitcond_flatten_reg_602))) begin
        sum_pix1_addr_1_reg_661 <= tmp_4_fu_509_p1;
        sum_pix2_addr_1_reg_667 <= tmp_4_fu_509_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_reg_ppiten_pp1_it2) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158) & (1'b0 == ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter1))) begin
        sum_pix1_load_reg_673 <= sum_pix1_q0;
        sum_pix2_load_reg_678 <= sum_pix2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_6) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == exitcond_reg_753) & (1'b0 == ap_sig_ioackin_outStream_TREADY)) & (1'b0 == exitcond_fu_544_p2))) begin
        tmp_11_reg_762 <= tmp_11_fu_556_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158) & (1'b0 == ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter2))) begin
        tmp_1_reg_688 <= tmp_1_fu_531_p2;
        tmp_9_reg_683 <= tmp_9_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        tmp_2_reg_597[34 : 3] <= tmp_2_fu_429_p3[34 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st10_fsm_5)) begin
        tmp_dest_V_1_reg_748 <= dub_pix_dest_V_q0;
        tmp_id_V_1_reg_743 <= dub_pix_id_V_q0;
        tmp_keep_V_1_reg_723[1 : 0] <= tmp_keep_V_1_fu_536_p1[1 : 0];
        tmp_last_V_1_reg_738 <= dub_pix_last_V_q0;
        tmp_strb_V_1_reg_728[1 : 0] <= tmp_strb_V_1_fu_540_p1[1 : 0];
        tmp_user_V_1_reg_733 <= dub_pix_user_V_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st13_fsm_7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st13_fsm_7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_57) begin
        ap_sig_cseq_ST_pp1_stg0_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp1_stg0_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_80) begin
        ap_sig_cseq_ST_pp2_stg0_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp2_stg0_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_248) begin
        ap_sig_cseq_ST_st10_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_566) begin
        ap_sig_cseq_ST_st13_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_25) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_144) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_153) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_229) begin
        ap_sig_cseq_ST_st9_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_outStream_TREADY)) begin
        ap_sig_ioackin_outStream_TREADY = outStream_TREADY;
    end else begin
        ap_sig_ioackin_outStream_TREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1))) begin
        dub_pix_dest_V_address0 = tmp_4_fu_509_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st9_fsm_4)) begin
        dub_pix_dest_V_address0 = ap_const_lv64_0;
    end else begin
        dub_pix_dest_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st9_fsm_4) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158)))) begin
        dub_pix_dest_V_ce0 = 1'b1;
    end else begin
        dub_pix_dest_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158) & (1'b0 == exitcond_flatten_reg_602))) begin
        dub_pix_dest_V_we0 = 1'b1;
    end else begin
        dub_pix_dest_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1))) begin
        dub_pix_id_V_address0 = tmp_4_fu_509_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st9_fsm_4)) begin
        dub_pix_id_V_address0 = ap_const_lv64_0;
    end else begin
        dub_pix_id_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st9_fsm_4) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158)))) begin
        dub_pix_id_V_ce0 = 1'b1;
    end else begin
        dub_pix_id_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158) & (1'b0 == exitcond_flatten_reg_602))) begin
        dub_pix_id_V_we0 = 1'b1;
    end else begin
        dub_pix_id_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1))) begin
        dub_pix_keep_V_address0 = tmp_4_fu_509_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st9_fsm_4)) begin
        dub_pix_keep_V_address0 = ap_const_lv64_0;
    end else begin
        dub_pix_keep_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st9_fsm_4) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158)))) begin
        dub_pix_keep_V_ce0 = 1'b1;
    end else begin
        dub_pix_keep_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158) & (1'b0 == exitcond_flatten_reg_602))) begin
        dub_pix_keep_V_we0 = 1'b1;
    end else begin
        dub_pix_keep_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1))) begin
        dub_pix_last_V_address0 = tmp_4_fu_509_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st9_fsm_4)) begin
        dub_pix_last_V_address0 = ap_const_lv64_0;
    end else begin
        dub_pix_last_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st9_fsm_4) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158)))) begin
        dub_pix_last_V_ce0 = 1'b1;
    end else begin
        dub_pix_last_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158) & (1'b0 == exitcond_flatten_reg_602))) begin
        dub_pix_last_V_we0 = 1'b1;
    end else begin
        dub_pix_last_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1))) begin
        dub_pix_strb_V_address0 = tmp_4_fu_509_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st9_fsm_4)) begin
        dub_pix_strb_V_address0 = ap_const_lv64_0;
    end else begin
        dub_pix_strb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st9_fsm_4) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158)))) begin
        dub_pix_strb_V_ce0 = 1'b1;
    end else begin
        dub_pix_strb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158) & (1'b0 == exitcond_flatten_reg_602))) begin
        dub_pix_strb_V_we0 = 1'b1;
    end else begin
        dub_pix_strb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1))) begin
        dub_pix_user_V_address0 = tmp_4_fu_509_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st9_fsm_4)) begin
        dub_pix_user_V_address0 = ap_const_lv64_0;
    end else begin
        dub_pix_user_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st9_fsm_4) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158)))) begin
        dub_pix_user_V_ce0 = 1'b1;
    end else begin
        dub_pix_user_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158) & (1'b0 == exitcond_flatten_reg_602))) begin
        dub_pix_user_V_we0 = 1'b1;
    end else begin
        dub_pix_user_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it0) & (exitcond_flatten_fu_436_p2 == 1'b0))) begin
        inStream_TDATA_blk_n = inStream_TVALID;
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it0) & (exitcond_flatten_fu_436_p2 == 1'b0) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158))) begin
        inStream_TREADY = 1'b1;
    end else begin
        inStream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_6) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == exitcond_reg_753))) begin
        outStream_TDATA_blk_n = outStream_TREADY;
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_6) & (1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == exitcond_reg_753) & (1'b0 == ap_reg_ioackin_outStream_TREADY))) begin
        outStream_TVALID = 1'b1;
    end else begin
        outStream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        sum_pix1_address0 = tmp_fu_423_p1;
    end else if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1))) begin
        sum_pix1_address0 = tmp_4_fu_509_p1;
    end else begin
        sum_pix1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_reg_ppiten_pp1_it4)) begin
        sum_pix1_address1 = ap_reg_ppstg_sum_pix1_addr_1_reg_661_pp1_iter3;
    end else if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_6) & (1'b1 == ap_reg_ppiten_pp2_it0))) begin
        sum_pix1_address1 = tmp_10_fu_570_p1;
    end else begin
        sum_pix1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158)))) begin
        sum_pix1_ce0 = 1'b1;
    end else begin
        sum_pix1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_6) & (1'b1 == ap_reg_ppiten_pp2_it0) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == exitcond_reg_753) & (1'b0 == ap_sig_ioackin_outStream_TREADY))) | ((1'b1 == ap_reg_ppiten_pp1_it4) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158)))) begin
        sum_pix1_ce1 = 1'b1;
    end else begin
        sum_pix1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_fu_411_p2))) begin
        sum_pix1_we0 = 1'b1;
    end else begin
        sum_pix1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_reg_ppiten_pp1_it4) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158) & (1'b0 == ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter3))) begin
        sum_pix1_we1 = 1'b1;
    end else begin
        sum_pix1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        sum_pix2_address0 = tmp_fu_423_p1;
    end else if (((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1))) begin
        sum_pix2_address0 = tmp_4_fu_509_p1;
    end else begin
        sum_pix2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_reg_ppiten_pp1_it4)) begin
        sum_pix2_address1 = ap_reg_ppstg_sum_pix2_addr_1_reg_667_pp1_iter3;
    end else if (((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_6) & (1'b1 == ap_reg_ppiten_pp2_it0))) begin
        sum_pix2_address1 = tmp_10_fu_570_p1;
    end else begin
        sum_pix2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | ((1'b1 == ap_sig_cseq_ST_pp1_stg0_fsm_3) & (1'b1 == ap_reg_ppiten_pp1_it1) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158)))) begin
        sum_pix2_ce0 = 1'b1;
    end else begin
        sum_pix2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_pp2_stg0_fsm_6) & (1'b1 == ap_reg_ppiten_pp2_it0) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == exitcond_reg_753) & (1'b0 == ap_sig_ioackin_outStream_TREADY))) | ((1'b1 == ap_reg_ppiten_pp1_it4) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158)))) begin
        sum_pix2_ce1 = 1'b1;
    end else begin
        sum_pix2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_fu_411_p2))) begin
        sum_pix2_we0 = 1'b1;
    end else begin
        sum_pix2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_reg_ppiten_pp1_it4) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158) & (1'b0 == ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter3))) begin
        sum_pix2_we1 = 1'b1;
    end else begin
        sum_pix2_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if ((1'b0 == exitcond1_fu_411_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_pp1_stg0_fsm_3;
        end
        ap_ST_pp1_stg0_fsm_3 : begin
            if ((~((1'b1 == ap_reg_ppiten_pp1_it4) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158) & ~(1'b1 == ap_reg_ppiten_pp1_it3)) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158) & ~(exitcond_flatten_fu_436_p2 == 1'b0) & ~(1'b1 == ap_reg_ppiten_pp1_it1)))) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_3;
            end else if ((((1'b1 == ap_reg_ppiten_pp1_it4) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158) & ~(1'b1 == ap_reg_ppiten_pp1_it3)) | ((1'b1 == ap_reg_ppiten_pp1_it0) & ~((1'b1 == ap_reg_ppiten_pp1_it0) & ap_sig_158) & ~(exitcond_flatten_fu_436_p2 == 1'b0) & ~(1'b1 == ap_reg_ppiten_pp1_it1)))) begin
                ap_NS_fsm = ap_ST_st9_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_3;
            end
        end
        ap_ST_st9_fsm_4 : begin
            ap_NS_fsm = ap_ST_st10_fsm_5;
        end
        ap_ST_st10_fsm_5 : begin
            ap_NS_fsm = ap_ST_pp2_stg0_fsm_6;
        end
        ap_ST_pp2_stg0_fsm_6 : begin
            if (~((1'b1 == ap_reg_ppiten_pp2_it0) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == exitcond_reg_753) & (1'b0 == ap_sig_ioackin_outStream_TREADY)) & ~(1'b0 == exitcond_fu_544_p2))) begin
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_6;
            end else if (((1'b1 == ap_reg_ppiten_pp2_it0) & ~((1'b1 == ap_reg_ppiten_pp2_it1) & (1'b0 == exitcond_reg_753) & (1'b0 == ap_sig_ioackin_outStream_TREADY)) & ~(1'b0 == exitcond_fu_544_p2))) begin
                ap_NS_fsm = ap_ST_st13_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_6;
            end
        end
        ap_ST_st13_fsm_7 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

always @ (*) begin
    ap_sig_144 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_153 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_158 = ((exitcond_flatten_fu_436_p2 == 1'b0) & (inStream_TVALID == 1'b0));
end

always @ (*) begin
    ap_sig_229 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_248 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_25 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_566 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_57 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_80 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

assign exitcond1_fu_411_p2 = ((i_reg_367 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign exitcond2_fu_447_p2 = ((k_reg_389 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_436_p2 = ((indvar_flatten_reg_378 == tmp_2_reg_597) ? 1'b1 : 1'b0);

assign exitcond_fu_544_p2 = ((l_reg_400 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign i_1_fu_417_p2 = (i_reg_367 + ap_const_lv4_1);

assign indvar_flatten_next_fu_441_p2 = (indvar_flatten_reg_378 + ap_const_lv35_1);

assign k_1_fu_503_p2 = (ap_const_lv4_1 + k_mid2_fu_453_p3);

assign k_mid2_fu_453_p3 = ((exitcond2_fu_447_p2[0:0] === 1'b1) ? ap_const_lv4_0 : k_reg_389);

assign l_1_fu_550_p2 = (l_reg_400 + ap_const_lv5_1);

assign outStream_TDATA = ((tmp_11_reg_762[0:0] === 1'b1) ? sum_pix1_q1 : sum_pix2_q1);

assign outStream_TDEST = tmp_dest_V_1_reg_748;

assign outStream_TID = tmp_id_V_1_reg_743;

assign outStream_TKEEP = tmp_keep_V_1_reg_723;

assign outStream_TLAST = tmp_last_V_1_reg_738;

assign outStream_TSTRB = tmp_strb_V_1_reg_728;

assign outStream_TUSER = tmp_user_V_1_reg_733;

assign p_lshr_f_cast_fu_560_p4 = {{l_reg_400[ap_const_lv32_3 : ap_const_lv32_1]}};

assign tmp_10_fu_570_p1 = p_lshr_f_cast_fu_560_p4;

assign tmp_11_fu_556_p1 = l_reg_400[0:0];

assign tmp_1_fu_531_p2 = (tmp_s_fu_528_p1 + sum_pix2_load_reg_678);

assign tmp_2_fu_429_p3 = {{param_read_reg_584}, {ap_const_lv3_0}};

assign tmp_4_fu_509_p1 = k_mid2_reg_611;

assign tmp_6_fu_489_p1 = inStream_TDATA[7:0];

assign tmp_8_fu_520_p1 = ap_reg_ppstg_tmp_6_reg_646_pp1_iter2;

assign tmp_9_fu_523_p2 = (tmp_8_fu_520_p1 + sum_pix1_load_reg_673);

assign tmp_fu_423_p1 = i_reg_367;

assign tmp_keep_V_1_fu_536_p1 = dub_pix_keep_V_q0;

assign tmp_s_fu_528_p1 = ap_reg_ppstg_phitmp_reg_651_pp1_iter2;

assign tmp_strb_V_1_fu_540_p1 = dub_pix_strb_V_q0;

always @ (posedge ap_clk) begin
    tmp_2_reg_597[2:0] <= 3'b000;
    tmp_keep_V_1_reg_723[3:2] <= 2'b00;
    tmp_strb_V_1_reg_728[3:2] <= 2'b00;
end

endmodule //scurve_adder
