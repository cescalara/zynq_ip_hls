// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "scurve_adder.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic scurve_adder::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic scurve_adder::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> scurve_adder::ap_ST_st1_fsm_0 = "1";
const sc_lv<8> scurve_adder::ap_ST_st2_fsm_1 = "10";
const sc_lv<8> scurve_adder::ap_ST_st3_fsm_2 = "100";
const sc_lv<8> scurve_adder::ap_ST_pp1_stg0_fsm_3 = "1000";
const sc_lv<8> scurve_adder::ap_ST_st9_fsm_4 = "10000";
const sc_lv<8> scurve_adder::ap_ST_st10_fsm_5 = "100000";
const sc_lv<8> scurve_adder::ap_ST_pp2_stg0_fsm_6 = "1000000";
const sc_lv<8> scurve_adder::ap_ST_st13_fsm_7 = "10000000";
const sc_lv<32> scurve_adder::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> scurve_adder::ap_const_lv1_1 = "1";
const sc_lv<32> scurve_adder::ap_const_lv32_3 = "11";
const sc_lv<1> scurve_adder::ap_const_lv1_0 = "0";
const sc_lv<32> scurve_adder::ap_const_lv32_6 = "110";
const int scurve_adder::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> scurve_adder::ap_const_lv32_1 = "1";
const sc_lv<32> scurve_adder::ap_const_lv32_2 = "10";
const sc_lv<32> scurve_adder::ap_const_lv32_4 = "100";
const sc_lv<32> scurve_adder::ap_const_lv32_5 = "101";
const sc_lv<4> scurve_adder::ap_const_lv4_0 = "0000";
const sc_lv<35> scurve_adder::ap_const_lv35_0 = "00000000000000000000000000000000000";
const sc_lv<5> scurve_adder::ap_const_lv5_0 = "00000";
const sc_lv<64> scurve_adder::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<4> scurve_adder::ap_const_lv4_8 = "1000";
const sc_lv<4> scurve_adder::ap_const_lv4_1 = "1";
const sc_lv<3> scurve_adder::ap_const_lv3_0 = "000";
const sc_lv<35> scurve_adder::ap_const_lv35_1 = "1";
const sc_lv<32> scurve_adder::ap_const_lv32_8 = "1000";
const sc_lv<32> scurve_adder::ap_const_lv32_F = "1111";
const sc_lv<5> scurve_adder::ap_const_lv5_10 = "10000";
const sc_lv<5> scurve_adder::ap_const_lv5_1 = "1";
const sc_lv<32> scurve_adder::ap_const_lv32_7 = "111";

scurve_adder::scurve_adder(sc_module_name name) : sc_module(name), mVcdFile(0) {
    scurve_adder_CTRL_BUS_s_axi_U = new scurve_adder_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>("scurve_adder_CTRL_BUS_s_axi_U");
    scurve_adder_CTRL_BUS_s_axi_U->AWVALID(s_axi_CTRL_BUS_AWVALID);
    scurve_adder_CTRL_BUS_s_axi_U->AWREADY(s_axi_CTRL_BUS_AWREADY);
    scurve_adder_CTRL_BUS_s_axi_U->AWADDR(s_axi_CTRL_BUS_AWADDR);
    scurve_adder_CTRL_BUS_s_axi_U->WVALID(s_axi_CTRL_BUS_WVALID);
    scurve_adder_CTRL_BUS_s_axi_U->WREADY(s_axi_CTRL_BUS_WREADY);
    scurve_adder_CTRL_BUS_s_axi_U->WDATA(s_axi_CTRL_BUS_WDATA);
    scurve_adder_CTRL_BUS_s_axi_U->WSTRB(s_axi_CTRL_BUS_WSTRB);
    scurve_adder_CTRL_BUS_s_axi_U->ARVALID(s_axi_CTRL_BUS_ARVALID);
    scurve_adder_CTRL_BUS_s_axi_U->ARREADY(s_axi_CTRL_BUS_ARREADY);
    scurve_adder_CTRL_BUS_s_axi_U->ARADDR(s_axi_CTRL_BUS_ARADDR);
    scurve_adder_CTRL_BUS_s_axi_U->RVALID(s_axi_CTRL_BUS_RVALID);
    scurve_adder_CTRL_BUS_s_axi_U->RREADY(s_axi_CTRL_BUS_RREADY);
    scurve_adder_CTRL_BUS_s_axi_U->RDATA(s_axi_CTRL_BUS_RDATA);
    scurve_adder_CTRL_BUS_s_axi_U->RRESP(s_axi_CTRL_BUS_RRESP);
    scurve_adder_CTRL_BUS_s_axi_U->BVALID(s_axi_CTRL_BUS_BVALID);
    scurve_adder_CTRL_BUS_s_axi_U->BREADY(s_axi_CTRL_BUS_BREADY);
    scurve_adder_CTRL_BUS_s_axi_U->BRESP(s_axi_CTRL_BUS_BRESP);
    scurve_adder_CTRL_BUS_s_axi_U->ACLK(ap_clk);
    scurve_adder_CTRL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    scurve_adder_CTRL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    scurve_adder_CTRL_BUS_s_axi_U->ap_start(ap_start);
    scurve_adder_CTRL_BUS_s_axi_U->interrupt(interrupt);
    scurve_adder_CTRL_BUS_s_axi_U->ap_ready(ap_ready);
    scurve_adder_CTRL_BUS_s_axi_U->ap_done(ap_done);
    scurve_adder_CTRL_BUS_s_axi_U->ap_idle(ap_idle);
    scurve_adder_CTRL_BUS_s_axi_U->param(param);
    sum_pix1_U = new scurve_adder_sum_pix1("sum_pix1_U");
    sum_pix1_U->clk(ap_clk);
    sum_pix1_U->reset(ap_rst_n_inv);
    sum_pix1_U->address0(sum_pix1_address0);
    sum_pix1_U->ce0(sum_pix1_ce0);
    sum_pix1_U->we0(sum_pix1_we0);
    sum_pix1_U->d0(ap_var_for_const1);
    sum_pix1_U->q0(sum_pix1_q0);
    sum_pix1_U->address1(sum_pix1_address1);
    sum_pix1_U->ce1(sum_pix1_ce1);
    sum_pix1_U->we1(sum_pix1_we1);
    sum_pix1_U->d1(tmp_9_reg_683);
    sum_pix1_U->q1(sum_pix1_q1);
    sum_pix2_U = new scurve_adder_sum_pix1("sum_pix2_U");
    sum_pix2_U->clk(ap_clk);
    sum_pix2_U->reset(ap_rst_n_inv);
    sum_pix2_U->address0(sum_pix2_address0);
    sum_pix2_U->ce0(sum_pix2_ce0);
    sum_pix2_U->we0(sum_pix2_we0);
    sum_pix2_U->d0(ap_var_for_const1);
    sum_pix2_U->q0(sum_pix2_q0);
    sum_pix2_U->address1(sum_pix2_address1);
    sum_pix2_U->ce1(sum_pix2_ce1);
    sum_pix2_U->we1(sum_pix2_we1);
    sum_pix2_U->d1(tmp_1_reg_688);
    sum_pix2_U->q1(sum_pix2_q1);
    dub_pix_keep_V_U = new scurve_adder_dub_pix_keep_V("dub_pix_keep_V_U");
    dub_pix_keep_V_U->clk(ap_clk);
    dub_pix_keep_V_U->reset(ap_rst_n_inv);
    dub_pix_keep_V_U->address0(dub_pix_keep_V_address0);
    dub_pix_keep_V_U->ce0(dub_pix_keep_V_ce0);
    dub_pix_keep_V_U->we0(dub_pix_keep_V_we0);
    dub_pix_keep_V_U->d0(tmp_keep_V_reg_616);
    dub_pix_keep_V_U->q0(dub_pix_keep_V_q0);
    dub_pix_strb_V_U = new scurve_adder_dub_pix_keep_V("dub_pix_strb_V_U");
    dub_pix_strb_V_U->clk(ap_clk);
    dub_pix_strb_V_U->reset(ap_rst_n_inv);
    dub_pix_strb_V_U->address0(dub_pix_strb_V_address0);
    dub_pix_strb_V_U->ce0(dub_pix_strb_V_ce0);
    dub_pix_strb_V_U->we0(dub_pix_strb_V_we0);
    dub_pix_strb_V_U->d0(tmp_strb_V_reg_621);
    dub_pix_strb_V_U->q0(dub_pix_strb_V_q0);
    dub_pix_user_V_U = new scurve_adder_dub_pix_keep_V("dub_pix_user_V_U");
    dub_pix_user_V_U->clk(ap_clk);
    dub_pix_user_V_U->reset(ap_rst_n_inv);
    dub_pix_user_V_U->address0(dub_pix_user_V_address0);
    dub_pix_user_V_U->ce0(dub_pix_user_V_ce0);
    dub_pix_user_V_U->we0(dub_pix_user_V_we0);
    dub_pix_user_V_U->d0(tmp_user_V_reg_626);
    dub_pix_user_V_U->q0(dub_pix_user_V_q0);
    dub_pix_last_V_U = new scurve_adder_dub_pix_last_V("dub_pix_last_V_U");
    dub_pix_last_V_U->clk(ap_clk);
    dub_pix_last_V_U->reset(ap_rst_n_inv);
    dub_pix_last_V_U->address0(dub_pix_last_V_address0);
    dub_pix_last_V_U->ce0(dub_pix_last_V_ce0);
    dub_pix_last_V_U->we0(dub_pix_last_V_we0);
    dub_pix_last_V_U->d0(tmp_last_V_reg_631);
    dub_pix_last_V_U->q0(dub_pix_last_V_q0);
    dub_pix_id_V_U = new scurve_adder_dub_pix_id_V("dub_pix_id_V_U");
    dub_pix_id_V_U->clk(ap_clk);
    dub_pix_id_V_U->reset(ap_rst_n_inv);
    dub_pix_id_V_U->address0(dub_pix_id_V_address0);
    dub_pix_id_V_U->ce0(dub_pix_id_V_ce0);
    dub_pix_id_V_U->we0(dub_pix_id_V_we0);
    dub_pix_id_V_U->d0(tmp_id_V_reg_636);
    dub_pix_id_V_U->q0(dub_pix_id_V_q0);
    dub_pix_dest_V_U = new scurve_adder_dub_pix_dest_V("dub_pix_dest_V_U");
    dub_pix_dest_V_U->clk(ap_clk);
    dub_pix_dest_V_U->reset(ap_rst_n_inv);
    dub_pix_dest_V_U->address0(dub_pix_dest_V_address0);
    dub_pix_dest_V_U->ce0(dub_pix_dest_V_ce0);
    dub_pix_dest_V_U->we0(dub_pix_dest_V_we0);
    dub_pix_dest_V_U->d0(tmp_dest_V_reg_641);
    dub_pix_dest_V_U->q0(dub_pix_dest_V_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st13_fsm_7 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st13_fsm_7 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_144);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_153);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_158);
    sensitive << ( inStream_TVALID );
    sensitive << ( exitcond_flatten_fu_436_p2 );

    SC_METHOD(thread_ap_sig_229);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_248);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_566);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_57);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_80);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_pp1_stg0_fsm_3);
    sensitive << ( ap_sig_57 );

    SC_METHOD(thread_ap_sig_cseq_ST_pp2_stg0_fsm_6);
    sensitive << ( ap_sig_80 );

    SC_METHOD(thread_ap_sig_cseq_ST_st10_fsm_5);
    sensitive << ( ap_sig_248 );

    SC_METHOD(thread_ap_sig_cseq_ST_st13_fsm_7);
    sensitive << ( ap_sig_566 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_25 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_144 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_153 );

    SC_METHOD(thread_ap_sig_cseq_ST_st9_fsm_4);
    sensitive << ( ap_sig_229 );

    SC_METHOD(thread_ap_sig_ioackin_outStream_TREADY);
    sensitive << ( outStream_TREADY );
    sensitive << ( ap_reg_ioackin_outStream_TREADY );

    SC_METHOD(thread_dub_pix_dest_V_address0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_4 );
    sensitive << ( tmp_4_fu_509_p1 );

    SC_METHOD(thread_dub_pix_dest_V_ce0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_sig_158 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_4 );

    SC_METHOD(thread_dub_pix_dest_V_we0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( exitcond_flatten_reg_602 );
    sensitive << ( ap_sig_158 );

    SC_METHOD(thread_dub_pix_id_V_address0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_4 );
    sensitive << ( tmp_4_fu_509_p1 );

    SC_METHOD(thread_dub_pix_id_V_ce0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_sig_158 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_4 );

    SC_METHOD(thread_dub_pix_id_V_we0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( exitcond_flatten_reg_602 );
    sensitive << ( ap_sig_158 );

    SC_METHOD(thread_dub_pix_keep_V_address0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_4 );
    sensitive << ( tmp_4_fu_509_p1 );

    SC_METHOD(thread_dub_pix_keep_V_ce0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_sig_158 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_4 );

    SC_METHOD(thread_dub_pix_keep_V_we0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( exitcond_flatten_reg_602 );
    sensitive << ( ap_sig_158 );

    SC_METHOD(thread_dub_pix_last_V_address0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_4 );
    sensitive << ( tmp_4_fu_509_p1 );

    SC_METHOD(thread_dub_pix_last_V_ce0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_sig_158 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_4 );

    SC_METHOD(thread_dub_pix_last_V_we0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( exitcond_flatten_reg_602 );
    sensitive << ( ap_sig_158 );

    SC_METHOD(thread_dub_pix_strb_V_address0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_4 );
    sensitive << ( tmp_4_fu_509_p1 );

    SC_METHOD(thread_dub_pix_strb_V_ce0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_sig_158 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_4 );

    SC_METHOD(thread_dub_pix_strb_V_we0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( exitcond_flatten_reg_602 );
    sensitive << ( ap_sig_158 );

    SC_METHOD(thread_dub_pix_user_V_address0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_4 );
    sensitive << ( tmp_4_fu_509_p1 );

    SC_METHOD(thread_dub_pix_user_V_ce0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_sig_158 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_4 );

    SC_METHOD(thread_dub_pix_user_V_we0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( exitcond_flatten_reg_602 );
    sensitive << ( ap_sig_158 );

    SC_METHOD(thread_exitcond1_fu_411_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_reg_367 );

    SC_METHOD(thread_exitcond2_fu_447_p2);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( exitcond_flatten_fu_436_p2 );
    sensitive << ( k_reg_389 );
    sensitive << ( ap_sig_158 );

    SC_METHOD(thread_exitcond_flatten_fu_436_p2);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( indvar_flatten_reg_378 );
    sensitive << ( tmp_2_reg_597 );
    sensitive << ( ap_sig_158 );

    SC_METHOD(thread_exitcond_fu_544_p2);
    sensitive << ( ap_sig_cseq_ST_pp2_stg0_fsm_6 );
    sensitive << ( ap_reg_ppiten_pp2_it1 );
    sensitive << ( ap_reg_ppiten_pp2_it0 );
    sensitive << ( exitcond_reg_753 );
    sensitive << ( l_reg_400 );
    sensitive << ( ap_sig_ioackin_outStream_TREADY );

    SC_METHOD(thread_i_1_fu_417_p2);
    sensitive << ( i_reg_367 );

    SC_METHOD(thread_inStream_TDATA_blk_n);
    sensitive << ( inStream_TVALID );
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( exitcond_flatten_fu_436_p2 );

    SC_METHOD(thread_inStream_TREADY);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( exitcond_flatten_fu_436_p2 );
    sensitive << ( ap_sig_158 );

    SC_METHOD(thread_indvar_flatten_next_fu_441_p2);
    sensitive << ( indvar_flatten_reg_378 );

    SC_METHOD(thread_k_1_fu_503_p2);
    sensitive << ( k_mid2_fu_453_p3 );

    SC_METHOD(thread_k_mid2_fu_453_p3);
    sensitive << ( k_reg_389 );
    sensitive << ( exitcond2_fu_447_p2 );

    SC_METHOD(thread_l_1_fu_550_p2);
    sensitive << ( l_reg_400 );

    SC_METHOD(thread_outStream_TDATA);
    sensitive << ( ap_sig_cseq_ST_pp2_stg0_fsm_6 );
    sensitive << ( ap_reg_ppiten_pp2_it1 );
    sensitive << ( exitcond_reg_753 );
    sensitive << ( tmp_11_reg_762 );
    sensitive << ( sum_pix1_q1 );
    sensitive << ( sum_pix2_q1 );

    SC_METHOD(thread_outStream_TDATA_blk_n);
    sensitive << ( outStream_TREADY );
    sensitive << ( ap_sig_cseq_ST_pp2_stg0_fsm_6 );
    sensitive << ( ap_reg_ppiten_pp2_it1 );
    sensitive << ( exitcond_reg_753 );

    SC_METHOD(thread_outStream_TDEST);
    sensitive << ( ap_sig_cseq_ST_pp2_stg0_fsm_6 );
    sensitive << ( ap_reg_ppiten_pp2_it1 );
    sensitive << ( exitcond_reg_753 );
    sensitive << ( tmp_dest_V_1_reg_748 );

    SC_METHOD(thread_outStream_TID);
    sensitive << ( ap_sig_cseq_ST_pp2_stg0_fsm_6 );
    sensitive << ( ap_reg_ppiten_pp2_it1 );
    sensitive << ( exitcond_reg_753 );
    sensitive << ( tmp_id_V_1_reg_743 );

    SC_METHOD(thread_outStream_TKEEP);
    sensitive << ( ap_sig_cseq_ST_pp2_stg0_fsm_6 );
    sensitive << ( ap_reg_ppiten_pp2_it1 );
    sensitive << ( exitcond_reg_753 );
    sensitive << ( tmp_keep_V_1_reg_723 );

    SC_METHOD(thread_outStream_TLAST);
    sensitive << ( ap_sig_cseq_ST_pp2_stg0_fsm_6 );
    sensitive << ( ap_reg_ppiten_pp2_it1 );
    sensitive << ( exitcond_reg_753 );
    sensitive << ( tmp_last_V_1_reg_738 );

    SC_METHOD(thread_outStream_TSTRB);
    sensitive << ( ap_sig_cseq_ST_pp2_stg0_fsm_6 );
    sensitive << ( ap_reg_ppiten_pp2_it1 );
    sensitive << ( exitcond_reg_753 );
    sensitive << ( tmp_strb_V_1_reg_728 );

    SC_METHOD(thread_outStream_TUSER);
    sensitive << ( ap_sig_cseq_ST_pp2_stg0_fsm_6 );
    sensitive << ( ap_reg_ppiten_pp2_it1 );
    sensitive << ( exitcond_reg_753 );
    sensitive << ( tmp_user_V_1_reg_733 );

    SC_METHOD(thread_outStream_TVALID);
    sensitive << ( ap_sig_cseq_ST_pp2_stg0_fsm_6 );
    sensitive << ( ap_reg_ppiten_pp2_it1 );
    sensitive << ( exitcond_reg_753 );
    sensitive << ( ap_reg_ioackin_outStream_TREADY );

    SC_METHOD(thread_p_lshr_f_cast_fu_560_p4);
    sensitive << ( l_reg_400 );

    SC_METHOD(thread_sum_pix1_address0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_423_p1 );
    sensitive << ( tmp_4_fu_509_p1 );

    SC_METHOD(thread_sum_pix1_address1);
    sensitive << ( ap_reg_ppiten_pp1_it4 );
    sensitive << ( ap_sig_cseq_ST_pp2_stg0_fsm_6 );
    sensitive << ( ap_reg_ppiten_pp2_it0 );
    sensitive << ( ap_reg_ppstg_sum_pix1_addr_1_reg_661_pp1_iter3 );
    sensitive << ( tmp_10_fu_570_p1 );

    SC_METHOD(thread_sum_pix1_ce0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_158 );

    SC_METHOD(thread_sum_pix1_ce1);
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it4 );
    sensitive << ( ap_sig_cseq_ST_pp2_stg0_fsm_6 );
    sensitive << ( ap_reg_ppiten_pp2_it1 );
    sensitive << ( ap_reg_ppiten_pp2_it0 );
    sensitive << ( exitcond_reg_753 );
    sensitive << ( ap_sig_158 );
    sensitive << ( ap_sig_ioackin_outStream_TREADY );

    SC_METHOD(thread_sum_pix1_we0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_411_p2 );

    SC_METHOD(thread_sum_pix1_we1);
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it4 );
    sensitive << ( ap_sig_158 );
    sensitive << ( ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter3 );

    SC_METHOD(thread_sum_pix2_address0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_423_p1 );
    sensitive << ( tmp_4_fu_509_p1 );

    SC_METHOD(thread_sum_pix2_address1);
    sensitive << ( ap_reg_ppiten_pp1_it4 );
    sensitive << ( ap_sig_cseq_ST_pp2_stg0_fsm_6 );
    sensitive << ( ap_reg_ppiten_pp2_it0 );
    sensitive << ( ap_reg_ppstg_sum_pix2_addr_1_reg_667_pp1_iter3 );
    sensitive << ( tmp_10_fu_570_p1 );

    SC_METHOD(thread_sum_pix2_ce0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_158 );

    SC_METHOD(thread_sum_pix2_ce1);
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it4 );
    sensitive << ( ap_sig_cseq_ST_pp2_stg0_fsm_6 );
    sensitive << ( ap_reg_ppiten_pp2_it1 );
    sensitive << ( ap_reg_ppiten_pp2_it0 );
    sensitive << ( exitcond_reg_753 );
    sensitive << ( ap_sig_158 );
    sensitive << ( ap_sig_ioackin_outStream_TREADY );

    SC_METHOD(thread_sum_pix2_we0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_411_p2 );

    SC_METHOD(thread_sum_pix2_we1);
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it4 );
    sensitive << ( ap_sig_158 );
    sensitive << ( ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter3 );

    SC_METHOD(thread_tmp_10_fu_570_p1);
    sensitive << ( p_lshr_f_cast_fu_560_p4 );

    SC_METHOD(thread_tmp_11_fu_556_p1);
    sensitive << ( l_reg_400 );

    SC_METHOD(thread_tmp_1_fu_531_p2);
    sensitive << ( sum_pix2_load_reg_678 );
    sensitive << ( tmp_s_fu_528_p1 );

    SC_METHOD(thread_tmp_2_fu_429_p3);
    sensitive << ( param_read_reg_584 );

    SC_METHOD(thread_tmp_4_fu_509_p1);
    sensitive << ( k_mid2_reg_611 );

    SC_METHOD(thread_tmp_6_fu_489_p1);
    sensitive << ( inStream_TDATA );

    SC_METHOD(thread_tmp_8_fu_520_p1);
    sensitive << ( ap_reg_ppstg_tmp_6_reg_646_pp1_iter2 );

    SC_METHOD(thread_tmp_9_fu_523_p2);
    sensitive << ( sum_pix1_load_reg_673 );
    sensitive << ( tmp_8_fu_520_p1 );

    SC_METHOD(thread_tmp_fu_423_p1);
    sensitive << ( i_reg_367 );

    SC_METHOD(thread_tmp_keep_V_1_fu_536_p1);
    sensitive << ( dub_pix_keep_V_q0 );

    SC_METHOD(thread_tmp_s_fu_528_p1);
    sensitive << ( ap_reg_ppstg_phitmp_reg_651_pp1_iter2 );

    SC_METHOD(thread_tmp_strb_V_1_fu_540_p1);
    sensitive << ( dub_pix_strb_V_q0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_reg_ppiten_pp1_it3 );
    sensitive << ( ap_reg_ppiten_pp1_it4 );
    sensitive << ( exitcond_flatten_fu_436_p2 );
    sensitive << ( ap_reg_ppiten_pp2_it1 );
    sensitive << ( ap_reg_ppiten_pp2_it0 );
    sensitive << ( exitcond_reg_753 );
    sensitive << ( ap_sig_158 );
    sensitive << ( exitcond_fu_544_p2 );
    sensitive << ( ap_sig_ioackin_outStream_TREADY );
    sensitive << ( exitcond1_fu_411_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "00000001";
    ap_reg_ppiten_pp1_it0 = SC_LOGIC_0;
    ap_reg_ppiten_pp1_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp1_it2 = SC_LOGIC_0;
    ap_reg_ppiten_pp1_it3 = SC_LOGIC_0;
    ap_reg_ppiten_pp1_it4 = SC_LOGIC_0;
    ap_reg_ppiten_pp2_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp2_it0 = SC_LOGIC_0;
    ap_reg_ioackin_outStream_TREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "scurve_adder_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, inStream_TDATA, "(port)inStream_TDATA");
    sc_trace(mVcdFile, inStream_TVALID, "(port)inStream_TVALID");
    sc_trace(mVcdFile, inStream_TREADY, "(port)inStream_TREADY");
    sc_trace(mVcdFile, inStream_TKEEP, "(port)inStream_TKEEP");
    sc_trace(mVcdFile, inStream_TSTRB, "(port)inStream_TSTRB");
    sc_trace(mVcdFile, inStream_TUSER, "(port)inStream_TUSER");
    sc_trace(mVcdFile, inStream_TLAST, "(port)inStream_TLAST");
    sc_trace(mVcdFile, inStream_TID, "(port)inStream_TID");
    sc_trace(mVcdFile, inStream_TDEST, "(port)inStream_TDEST");
    sc_trace(mVcdFile, outStream_TDATA, "(port)outStream_TDATA");
    sc_trace(mVcdFile, outStream_TVALID, "(port)outStream_TVALID");
    sc_trace(mVcdFile, outStream_TREADY, "(port)outStream_TREADY");
    sc_trace(mVcdFile, outStream_TKEEP, "(port)outStream_TKEEP");
    sc_trace(mVcdFile, outStream_TSTRB, "(port)outStream_TSTRB");
    sc_trace(mVcdFile, outStream_TUSER, "(port)outStream_TUSER");
    sc_trace(mVcdFile, outStream_TLAST, "(port)outStream_TLAST");
    sc_trace(mVcdFile, outStream_TID, "(port)outStream_TID");
    sc_trace(mVcdFile, outStream_TDEST, "(port)outStream_TDEST");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWVALID, "(port)s_axi_CTRL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWREADY, "(port)s_axi_CTRL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWADDR, "(port)s_axi_CTRL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WVALID, "(port)s_axi_CTRL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WREADY, "(port)s_axi_CTRL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WDATA, "(port)s_axi_CTRL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WSTRB, "(port)s_axi_CTRL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARVALID, "(port)s_axi_CTRL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARREADY, "(port)s_axi_CTRL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARADDR, "(port)s_axi_CTRL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RVALID, "(port)s_axi_CTRL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RREADY, "(port)s_axi_CTRL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RDATA, "(port)s_axi_CTRL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RRESP, "(port)s_axi_CTRL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BVALID, "(port)s_axi_CTRL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BREADY, "(port)s_axi_CTRL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BRESP, "(port)s_axi_CTRL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_25, "ap_sig_25");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, param, "param");
    sc_trace(mVcdFile, inStream_TDATA_blk_n, "inStream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp1_stg0_fsm_3, "ap_sig_cseq_ST_pp1_stg0_fsm_3");
    sc_trace(mVcdFile, ap_sig_57, "ap_sig_57");
    sc_trace(mVcdFile, ap_reg_ppiten_pp1_it0, "ap_reg_ppiten_pp1_it0");
    sc_trace(mVcdFile, ap_reg_ppiten_pp1_it1, "ap_reg_ppiten_pp1_it1");
    sc_trace(mVcdFile, ap_reg_ppiten_pp1_it2, "ap_reg_ppiten_pp1_it2");
    sc_trace(mVcdFile, ap_reg_ppiten_pp1_it3, "ap_reg_ppiten_pp1_it3");
    sc_trace(mVcdFile, ap_reg_ppiten_pp1_it4, "ap_reg_ppiten_pp1_it4");
    sc_trace(mVcdFile, exitcond_flatten_fu_436_p2, "exitcond_flatten_fu_436_p2");
    sc_trace(mVcdFile, outStream_TDATA_blk_n, "outStream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp2_stg0_fsm_6, "ap_sig_cseq_ST_pp2_stg0_fsm_6");
    sc_trace(mVcdFile, ap_sig_80, "ap_sig_80");
    sc_trace(mVcdFile, ap_reg_ppiten_pp2_it1, "ap_reg_ppiten_pp2_it1");
    sc_trace(mVcdFile, ap_reg_ppiten_pp2_it0, "ap_reg_ppiten_pp2_it0");
    sc_trace(mVcdFile, exitcond_reg_753, "exitcond_reg_753");
    sc_trace(mVcdFile, indvar_flatten_reg_378, "indvar_flatten_reg_378");
    sc_trace(mVcdFile, k_reg_389, "k_reg_389");
    sc_trace(mVcdFile, l_reg_400, "l_reg_400");
    sc_trace(mVcdFile, param_read_reg_584, "param_read_reg_584");
    sc_trace(mVcdFile, i_1_fu_417_p2, "i_1_fu_417_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_144, "ap_sig_144");
    sc_trace(mVcdFile, tmp_2_fu_429_p3, "tmp_2_fu_429_p3");
    sc_trace(mVcdFile, tmp_2_reg_597, "tmp_2_reg_597");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_153, "ap_sig_153");
    sc_trace(mVcdFile, exitcond_flatten_reg_602, "exitcond_flatten_reg_602");
    sc_trace(mVcdFile, ap_sig_158, "ap_sig_158");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter1, "ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter1");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter2, "ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter2");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter3, "ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter3");
    sc_trace(mVcdFile, indvar_flatten_next_fu_441_p2, "indvar_flatten_next_fu_441_p2");
    sc_trace(mVcdFile, k_mid2_fu_453_p3, "k_mid2_fu_453_p3");
    sc_trace(mVcdFile, k_mid2_reg_611, "k_mid2_reg_611");
    sc_trace(mVcdFile, tmp_keep_V_reg_616, "tmp_keep_V_reg_616");
    sc_trace(mVcdFile, tmp_strb_V_reg_621, "tmp_strb_V_reg_621");
    sc_trace(mVcdFile, tmp_user_V_reg_626, "tmp_user_V_reg_626");
    sc_trace(mVcdFile, tmp_last_V_reg_631, "tmp_last_V_reg_631");
    sc_trace(mVcdFile, tmp_id_V_reg_636, "tmp_id_V_reg_636");
    sc_trace(mVcdFile, tmp_dest_V_reg_641, "tmp_dest_V_reg_641");
    sc_trace(mVcdFile, tmp_6_fu_489_p1, "tmp_6_fu_489_p1");
    sc_trace(mVcdFile, tmp_6_reg_646, "tmp_6_reg_646");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_6_reg_646_pp1_iter1, "ap_reg_ppstg_tmp_6_reg_646_pp1_iter1");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_6_reg_646_pp1_iter2, "ap_reg_ppstg_tmp_6_reg_646_pp1_iter2");
    sc_trace(mVcdFile, phitmp_reg_651, "phitmp_reg_651");
    sc_trace(mVcdFile, ap_reg_ppstg_phitmp_reg_651_pp1_iter1, "ap_reg_ppstg_phitmp_reg_651_pp1_iter1");
    sc_trace(mVcdFile, ap_reg_ppstg_phitmp_reg_651_pp1_iter2, "ap_reg_ppstg_phitmp_reg_651_pp1_iter2");
    sc_trace(mVcdFile, k_1_fu_503_p2, "k_1_fu_503_p2");
    sc_trace(mVcdFile, sum_pix1_addr_1_reg_661, "sum_pix1_addr_1_reg_661");
    sc_trace(mVcdFile, ap_reg_ppstg_sum_pix1_addr_1_reg_661_pp1_iter2, "ap_reg_ppstg_sum_pix1_addr_1_reg_661_pp1_iter2");
    sc_trace(mVcdFile, ap_reg_ppstg_sum_pix1_addr_1_reg_661_pp1_iter3, "ap_reg_ppstg_sum_pix1_addr_1_reg_661_pp1_iter3");
    sc_trace(mVcdFile, sum_pix2_addr_1_reg_667, "sum_pix2_addr_1_reg_667");
    sc_trace(mVcdFile, ap_reg_ppstg_sum_pix2_addr_1_reg_667_pp1_iter2, "ap_reg_ppstg_sum_pix2_addr_1_reg_667_pp1_iter2");
    sc_trace(mVcdFile, ap_reg_ppstg_sum_pix2_addr_1_reg_667_pp1_iter3, "ap_reg_ppstg_sum_pix2_addr_1_reg_667_pp1_iter3");
    sc_trace(mVcdFile, sum_pix1_q0, "sum_pix1_q0");
    sc_trace(mVcdFile, sum_pix1_load_reg_673, "sum_pix1_load_reg_673");
    sc_trace(mVcdFile, sum_pix2_q0, "sum_pix2_q0");
    sc_trace(mVcdFile, sum_pix2_load_reg_678, "sum_pix2_load_reg_678");
    sc_trace(mVcdFile, tmp_9_fu_523_p2, "tmp_9_fu_523_p2");
    sc_trace(mVcdFile, tmp_9_reg_683, "tmp_9_reg_683");
    sc_trace(mVcdFile, tmp_1_fu_531_p2, "tmp_1_fu_531_p2");
    sc_trace(mVcdFile, tmp_1_reg_688, "tmp_1_reg_688");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st9_fsm_4, "ap_sig_cseq_ST_st9_fsm_4");
    sc_trace(mVcdFile, ap_sig_229, "ap_sig_229");
    sc_trace(mVcdFile, tmp_keep_V_1_fu_536_p1, "tmp_keep_V_1_fu_536_p1");
    sc_trace(mVcdFile, tmp_keep_V_1_reg_723, "tmp_keep_V_1_reg_723");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st10_fsm_5, "ap_sig_cseq_ST_st10_fsm_5");
    sc_trace(mVcdFile, ap_sig_248, "ap_sig_248");
    sc_trace(mVcdFile, tmp_strb_V_1_fu_540_p1, "tmp_strb_V_1_fu_540_p1");
    sc_trace(mVcdFile, tmp_strb_V_1_reg_728, "tmp_strb_V_1_reg_728");
    sc_trace(mVcdFile, dub_pix_user_V_q0, "dub_pix_user_V_q0");
    sc_trace(mVcdFile, tmp_user_V_1_reg_733, "tmp_user_V_1_reg_733");
    sc_trace(mVcdFile, dub_pix_last_V_q0, "dub_pix_last_V_q0");
    sc_trace(mVcdFile, tmp_last_V_1_reg_738, "tmp_last_V_1_reg_738");
    sc_trace(mVcdFile, dub_pix_id_V_q0, "dub_pix_id_V_q0");
    sc_trace(mVcdFile, tmp_id_V_1_reg_743, "tmp_id_V_1_reg_743");
    sc_trace(mVcdFile, dub_pix_dest_V_q0, "dub_pix_dest_V_q0");
    sc_trace(mVcdFile, tmp_dest_V_1_reg_748, "tmp_dest_V_1_reg_748");
    sc_trace(mVcdFile, exitcond_fu_544_p2, "exitcond_fu_544_p2");
    sc_trace(mVcdFile, ap_sig_ioackin_outStream_TREADY, "ap_sig_ioackin_outStream_TREADY");
    sc_trace(mVcdFile, l_1_fu_550_p2, "l_1_fu_550_p2");
    sc_trace(mVcdFile, tmp_11_fu_556_p1, "tmp_11_fu_556_p1");
    sc_trace(mVcdFile, tmp_11_reg_762, "tmp_11_reg_762");
    sc_trace(mVcdFile, sum_pix1_address0, "sum_pix1_address0");
    sc_trace(mVcdFile, sum_pix1_ce0, "sum_pix1_ce0");
    sc_trace(mVcdFile, sum_pix1_we0, "sum_pix1_we0");
    sc_trace(mVcdFile, sum_pix1_address1, "sum_pix1_address1");
    sc_trace(mVcdFile, sum_pix1_ce1, "sum_pix1_ce1");
    sc_trace(mVcdFile, sum_pix1_we1, "sum_pix1_we1");
    sc_trace(mVcdFile, sum_pix1_q1, "sum_pix1_q1");
    sc_trace(mVcdFile, sum_pix2_address0, "sum_pix2_address0");
    sc_trace(mVcdFile, sum_pix2_ce0, "sum_pix2_ce0");
    sc_trace(mVcdFile, sum_pix2_we0, "sum_pix2_we0");
    sc_trace(mVcdFile, sum_pix2_address1, "sum_pix2_address1");
    sc_trace(mVcdFile, sum_pix2_ce1, "sum_pix2_ce1");
    sc_trace(mVcdFile, sum_pix2_we1, "sum_pix2_we1");
    sc_trace(mVcdFile, sum_pix2_q1, "sum_pix2_q1");
    sc_trace(mVcdFile, dub_pix_keep_V_address0, "dub_pix_keep_V_address0");
    sc_trace(mVcdFile, dub_pix_keep_V_ce0, "dub_pix_keep_V_ce0");
    sc_trace(mVcdFile, dub_pix_keep_V_we0, "dub_pix_keep_V_we0");
    sc_trace(mVcdFile, dub_pix_keep_V_q0, "dub_pix_keep_V_q0");
    sc_trace(mVcdFile, dub_pix_strb_V_address0, "dub_pix_strb_V_address0");
    sc_trace(mVcdFile, dub_pix_strb_V_ce0, "dub_pix_strb_V_ce0");
    sc_trace(mVcdFile, dub_pix_strb_V_we0, "dub_pix_strb_V_we0");
    sc_trace(mVcdFile, dub_pix_strb_V_q0, "dub_pix_strb_V_q0");
    sc_trace(mVcdFile, dub_pix_user_V_address0, "dub_pix_user_V_address0");
    sc_trace(mVcdFile, dub_pix_user_V_ce0, "dub_pix_user_V_ce0");
    sc_trace(mVcdFile, dub_pix_user_V_we0, "dub_pix_user_V_we0");
    sc_trace(mVcdFile, dub_pix_last_V_address0, "dub_pix_last_V_address0");
    sc_trace(mVcdFile, dub_pix_last_V_ce0, "dub_pix_last_V_ce0");
    sc_trace(mVcdFile, dub_pix_last_V_we0, "dub_pix_last_V_we0");
    sc_trace(mVcdFile, dub_pix_id_V_address0, "dub_pix_id_V_address0");
    sc_trace(mVcdFile, dub_pix_id_V_ce0, "dub_pix_id_V_ce0");
    sc_trace(mVcdFile, dub_pix_id_V_we0, "dub_pix_id_V_we0");
    sc_trace(mVcdFile, dub_pix_dest_V_address0, "dub_pix_dest_V_address0");
    sc_trace(mVcdFile, dub_pix_dest_V_ce0, "dub_pix_dest_V_ce0");
    sc_trace(mVcdFile, dub_pix_dest_V_we0, "dub_pix_dest_V_we0");
    sc_trace(mVcdFile, i_reg_367, "i_reg_367");
    sc_trace(mVcdFile, exitcond1_fu_411_p2, "exitcond1_fu_411_p2");
    sc_trace(mVcdFile, tmp_fu_423_p1, "tmp_fu_423_p1");
    sc_trace(mVcdFile, tmp_4_fu_509_p1, "tmp_4_fu_509_p1");
    sc_trace(mVcdFile, tmp_10_fu_570_p1, "tmp_10_fu_570_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_outStream_TREADY, "ap_reg_ioackin_outStream_TREADY");
    sc_trace(mVcdFile, exitcond2_fu_447_p2, "exitcond2_fu_447_p2");
    sc_trace(mVcdFile, tmp_8_fu_520_p1, "tmp_8_fu_520_p1");
    sc_trace(mVcdFile, tmp_s_fu_528_p1, "tmp_s_fu_528_p1");
    sc_trace(mVcdFile, p_lshr_f_cast_fu_560_p4, "p_lshr_f_cast_fu_560_p4");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st13_fsm_7, "ap_sig_cseq_ST_st13_fsm_7");
    sc_trace(mVcdFile, ap_sig_566, "ap_sig_566");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("scurve_adder.hdltvin.dat");
    mHdltvoutHandle.open("scurve_adder.hdltvout.dat");
}

scurve_adder::~scurve_adder() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete scurve_adder_CTRL_BUS_s_axi_U;
    delete sum_pix1_U;
    delete sum_pix2_U;
    delete dub_pix_keep_V_U;
    delete dub_pix_strb_V_U;
    delete dub_pix_user_V_U;
    delete dub_pix_last_V_U;
    delete dub_pix_id_V_U;
    delete dub_pix_dest_V_U;
}

void scurve_adder::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void scurve_adder::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void scurve_adder::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_outStream_TREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp2_stg0_fsm_6.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it1.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_753.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_753.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()))))) {
            ap_reg_ioackin_outStream_TREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp2_stg0_fsm_6.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it1.read()) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_753.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_TREADY.read())))) {
            ap_reg_ioackin_outStream_TREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp1_it0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()) && 
             !esl_seteq<1,1,1>(exitcond_flatten_fu_436_p2.read(), ap_const_lv1_0))) {
            ap_reg_ppiten_pp1_it0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
            ap_reg_ppiten_pp1_it0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp1_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
             esl_seteq<1,1,1>(exitcond_flatten_fu_436_p2.read(), ap_const_lv1_0) && 
             !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()))) {
            ap_reg_ppiten_pp1_it1 = ap_const_logic_1;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()) && 
                     !esl_seteq<1,1,1>(exitcond_flatten_fu_436_p2.read(), ap_const_lv1_0)))) {
            ap_reg_ppiten_pp1_it1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp1_it2 = ap_const_logic_0;
    } else {
        if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read())) {
            ap_reg_ppiten_pp1_it2 = ap_reg_ppiten_pp1_it1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp1_it3 = ap_const_logic_0;
    } else {
        if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read())) {
            ap_reg_ppiten_pp1_it3 = ap_reg_ppiten_pp1_it2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp1_it4 = ap_const_logic_0;
    } else {
        if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read())) {
            ap_reg_ppiten_pp1_it4 = ap_reg_ppiten_pp1_it3.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
            ap_reg_ppiten_pp1_it4 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp2_it0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp2_stg0_fsm_6.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_753.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read())) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_544_p2.read()))) {
            ap_reg_ppiten_pp2_it0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_5.read())) {
            ap_reg_ppiten_pp2_it0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp2_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp2_stg0_fsm_6.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_753.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read())) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_544_p2.read()))) {
            ap_reg_ppiten_pp2_it1 = ap_const_logic_1;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_5.read()) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp2_stg0_fsm_6.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_753.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read())) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_544_p2.read())))) {
            ap_reg_ppiten_pp2_it1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_367 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_411_p2.read()))) {
        i_reg_367 = i_1_fu_417_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_fu_436_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()))) {
        indvar_flatten_reg_378 = indvar_flatten_next_fu_441_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        indvar_flatten_reg_378 = ap_const_lv35_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_fu_436_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()))) {
        k_reg_389 = k_1_fu_503_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        k_reg_389 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_5.read())) {
        l_reg_400 = ap_const_lv5_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp2_stg0_fsm_6.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it0.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_753.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read())) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_544_p2.read()))) {
        l_reg_400 = l_1_fu_550_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()))) {
        ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter1 = exitcond_flatten_reg_602.read();
        ap_reg_ppstg_phitmp_reg_651_pp1_iter1 = phitmp_reg_651.read();
        ap_reg_ppstg_tmp_6_reg_646_pp1_iter1 = tmp_6_reg_646.read();
        exitcond_flatten_reg_602 = exitcond_flatten_fu_436_p2.read();
    }
    if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read())) {
        ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter2 = ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter1.read();
        ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter3 = ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter2.read();
        ap_reg_ppstg_phitmp_reg_651_pp1_iter2 = ap_reg_ppstg_phitmp_reg_651_pp1_iter1.read();
        ap_reg_ppstg_sum_pix1_addr_1_reg_661_pp1_iter2 = sum_pix1_addr_1_reg_661.read();
        ap_reg_ppstg_sum_pix1_addr_1_reg_661_pp1_iter3 = ap_reg_ppstg_sum_pix1_addr_1_reg_661_pp1_iter2.read();
        ap_reg_ppstg_sum_pix2_addr_1_reg_667_pp1_iter2 = sum_pix2_addr_1_reg_667.read();
        ap_reg_ppstg_sum_pix2_addr_1_reg_667_pp1_iter3 = ap_reg_ppstg_sum_pix2_addr_1_reg_667_pp1_iter2.read();
        ap_reg_ppstg_tmp_6_reg_646_pp1_iter2 = ap_reg_ppstg_tmp_6_reg_646_pp1_iter1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp2_stg0_fsm_6.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_753.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read())))) {
        exitcond_reg_753 = exitcond_fu_544_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && esl_seteq<1,1,1>(exitcond_flatten_fu_436_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()))) {
        k_mid2_reg_611 = k_mid2_fu_453_p3.read();
        phitmp_reg_651 = inStream_TDATA.read().range(15, 8);
        tmp_6_reg_646 = tmp_6_fu_489_p1.read();
        tmp_dest_V_reg_641 = inStream_TDEST.read();
        tmp_id_V_reg_636 = inStream_TID.read();
        tmp_keep_V_reg_616 = inStream_TKEEP.read();
        tmp_last_V_reg_631 = inStream_TLAST.read();
        tmp_strb_V_reg_621 = inStream_TSTRB.read();
        tmp_user_V_reg_626 = inStream_TUSER.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        param_read_reg_584 = param.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_602.read()))) {
        sum_pix1_addr_1_reg_661 =  (sc_lv<3>) (tmp_4_fu_509_p1.read());
        sum_pix2_addr_1_reg_667 =  (sc_lv<3>) (tmp_4_fu_509_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter1.read()))) {
        sum_pix1_load_reg_673 = sum_pix1_q0.read();
        sum_pix2_load_reg_678 = sum_pix2_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp2_stg0_fsm_6.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_753.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_544_p2.read()))) {
        tmp_11_reg_762 = tmp_11_fu_556_p1.read();
    }
    if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter2.read()))) {
        tmp_1_reg_688 = tmp_1_fu_531_p2.read();
        tmp_9_reg_683 = tmp_9_fu_523_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        tmp_2_reg_597 = tmp_2_fu_429_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_5.read())) {
        tmp_dest_V_1_reg_748 = dub_pix_dest_V_q0.read();
        tmp_id_V_1_reg_743 = dub_pix_id_V_q0.read();
        tmp_keep_V_1_reg_723 = tmp_keep_V_1_fu_536_p1.read();
        tmp_last_V_1_reg_738 = dub_pix_last_V_q0.read();
        tmp_strb_V_1_reg_728 = tmp_strb_V_1_fu_540_p1.read();
        tmp_user_V_1_reg_733 = dub_pix_user_V_q0.read();
    }
}

void scurve_adder::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st13_fsm_7.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void scurve_adder::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void scurve_adder::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st13_fsm_7.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void scurve_adder::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void scurve_adder::thread_ap_sig_144() {
    ap_sig_144 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void scurve_adder::thread_ap_sig_153() {
    ap_sig_153 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void scurve_adder::thread_ap_sig_158() {
    ap_sig_158 = (esl_seteq<1,1,1>(exitcond_flatten_fu_436_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(inStream_TVALID.read(), ap_const_logic_0));
}

void scurve_adder::thread_ap_sig_229() {
    ap_sig_229 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void scurve_adder::thread_ap_sig_248() {
    ap_sig_248 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void scurve_adder::thread_ap_sig_25() {
    ap_sig_25 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void scurve_adder::thread_ap_sig_566() {
    ap_sig_566 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void scurve_adder::thread_ap_sig_57() {
    ap_sig_57 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void scurve_adder::thread_ap_sig_80() {
    ap_sig_80 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void scurve_adder::thread_ap_sig_cseq_ST_pp1_stg0_fsm_3() {
    if (ap_sig_57.read()) {
        ap_sig_cseq_ST_pp1_stg0_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp1_stg0_fsm_3 = ap_const_logic_0;
    }
}

void scurve_adder::thread_ap_sig_cseq_ST_pp2_stg0_fsm_6() {
    if (ap_sig_80.read()) {
        ap_sig_cseq_ST_pp2_stg0_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp2_stg0_fsm_6 = ap_const_logic_0;
    }
}

void scurve_adder::thread_ap_sig_cseq_ST_st10_fsm_5() {
    if (ap_sig_248.read()) {
        ap_sig_cseq_ST_st10_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st10_fsm_5 = ap_const_logic_0;
    }
}

void scurve_adder::thread_ap_sig_cseq_ST_st13_fsm_7() {
    if (ap_sig_566.read()) {
        ap_sig_cseq_ST_st13_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st13_fsm_7 = ap_const_logic_0;
    }
}

void scurve_adder::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_25.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_144.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void scurve_adder::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_153.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void scurve_adder::thread_ap_sig_cseq_ST_st9_fsm_4() {
    if (ap_sig_229.read()) {
        ap_sig_cseq_ST_st9_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st9_fsm_4 = ap_const_logic_0;
    }
}

void scurve_adder::thread_ap_sig_ioackin_outStream_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_outStream_TREADY.read())) {
        ap_sig_ioackin_outStream_TREADY = outStream_TREADY.read();
    } else {
        ap_sig_ioackin_outStream_TREADY = ap_const_logic_1;
    }
}

void scurve_adder::thread_dub_pix_dest_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()))) {
        dub_pix_dest_V_address0 =  (sc_lv<3>) (tmp_4_fu_509_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_4.read())) {
        dub_pix_dest_V_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        dub_pix_dest_V_address0 = "XXX";
    }
}

void scurve_adder::thread_dub_pix_dest_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read())))) {
        dub_pix_dest_V_ce0 = ap_const_logic_1;
    } else {
        dub_pix_dest_V_ce0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_dub_pix_dest_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_602.read())))) {
        dub_pix_dest_V_we0 = ap_const_logic_1;
    } else {
        dub_pix_dest_V_we0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_dub_pix_id_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()))) {
        dub_pix_id_V_address0 =  (sc_lv<3>) (tmp_4_fu_509_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_4.read())) {
        dub_pix_id_V_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        dub_pix_id_V_address0 = "XXX";
    }
}

void scurve_adder::thread_dub_pix_id_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read())))) {
        dub_pix_id_V_ce0 = ap_const_logic_1;
    } else {
        dub_pix_id_V_ce0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_dub_pix_id_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_602.read())))) {
        dub_pix_id_V_we0 = ap_const_logic_1;
    } else {
        dub_pix_id_V_we0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_dub_pix_keep_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()))) {
        dub_pix_keep_V_address0 =  (sc_lv<3>) (tmp_4_fu_509_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_4.read())) {
        dub_pix_keep_V_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        dub_pix_keep_V_address0 = "XXX";
    }
}

void scurve_adder::thread_dub_pix_keep_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read())))) {
        dub_pix_keep_V_ce0 = ap_const_logic_1;
    } else {
        dub_pix_keep_V_ce0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_dub_pix_keep_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_602.read())))) {
        dub_pix_keep_V_we0 = ap_const_logic_1;
    } else {
        dub_pix_keep_V_we0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_dub_pix_last_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()))) {
        dub_pix_last_V_address0 =  (sc_lv<3>) (tmp_4_fu_509_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_4.read())) {
        dub_pix_last_V_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        dub_pix_last_V_address0 = "XXX";
    }
}

void scurve_adder::thread_dub_pix_last_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read())))) {
        dub_pix_last_V_ce0 = ap_const_logic_1;
    } else {
        dub_pix_last_V_ce0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_dub_pix_last_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_602.read())))) {
        dub_pix_last_V_we0 = ap_const_logic_1;
    } else {
        dub_pix_last_V_we0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_dub_pix_strb_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()))) {
        dub_pix_strb_V_address0 =  (sc_lv<3>) (tmp_4_fu_509_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_4.read())) {
        dub_pix_strb_V_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        dub_pix_strb_V_address0 = "XXX";
    }
}

void scurve_adder::thread_dub_pix_strb_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read())))) {
        dub_pix_strb_V_ce0 = ap_const_logic_1;
    } else {
        dub_pix_strb_V_ce0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_dub_pix_strb_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_602.read())))) {
        dub_pix_strb_V_we0 = ap_const_logic_1;
    } else {
        dub_pix_strb_V_we0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_dub_pix_user_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()))) {
        dub_pix_user_V_address0 =  (sc_lv<3>) (tmp_4_fu_509_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_4.read())) {
        dub_pix_user_V_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        dub_pix_user_V_address0 = "XXX";
    }
}

void scurve_adder::thread_dub_pix_user_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read())))) {
        dub_pix_user_V_ce0 = ap_const_logic_1;
    } else {
        dub_pix_user_V_ce0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_dub_pix_user_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_602.read())))) {
        dub_pix_user_V_we0 = ap_const_logic_1;
    } else {
        dub_pix_user_V_we0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_exitcond1_fu_411_p2() {
    exitcond1_fu_411_p2 = (!i_reg_367.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_367.read() == ap_const_lv4_8);
}

void scurve_adder::thread_exitcond2_fu_447_p2() {
    exitcond2_fu_447_p2 = (!k_reg_389.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_389.read() == ap_const_lv4_8);
}

void scurve_adder::thread_exitcond_flatten_fu_436_p2() {
    exitcond_flatten_fu_436_p2 = (!indvar_flatten_reg_378.read().is_01() || !tmp_2_reg_597.read().is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_378.read() == tmp_2_reg_597.read());
}

void scurve_adder::thread_exitcond_fu_544_p2() {
    exitcond_fu_544_p2 = (!l_reg_400.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(l_reg_400.read() == ap_const_lv5_10);
}

void scurve_adder::thread_i_1_fu_417_p2() {
    i_1_fu_417_p2 = (!i_reg_367.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_367.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void scurve_adder::thread_inStream_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_fu_436_p2.read(), ap_const_lv1_0))) {
        inStream_TDATA_blk_n = inStream_TVALID.read();
    } else {
        inStream_TDATA_blk_n = ap_const_logic_1;
    }
}

void scurve_adder::thread_inStream_TREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && 
          esl_seteq<1,1,1>(exitcond_flatten_fu_436_p2.read(), ap_const_lv1_0) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read())))) {
        inStream_TREADY = ap_const_logic_1;
    } else {
        inStream_TREADY = ap_const_logic_0;
    }
}

void scurve_adder::thread_indvar_flatten_next_fu_441_p2() {
    indvar_flatten_next_fu_441_p2 = (!indvar_flatten_reg_378.read().is_01() || !ap_const_lv35_1.is_01())? sc_lv<35>(): (sc_biguint<35>(indvar_flatten_reg_378.read()) + sc_biguint<35>(ap_const_lv35_1));
}

void scurve_adder::thread_k_1_fu_503_p2() {
    k_1_fu_503_p2 = (!ap_const_lv4_1.is_01() || !k_mid2_fu_453_p3.read().is_01())? sc_lv<4>(): (sc_biguint<4>(ap_const_lv4_1) + sc_biguint<4>(k_mid2_fu_453_p3.read()));
}

void scurve_adder::thread_k_mid2_fu_453_p3() {
    k_mid2_fu_453_p3 = (!exitcond2_fu_447_p2.read()[0].is_01())? sc_lv<4>(): ((exitcond2_fu_447_p2.read()[0].to_bool())? ap_const_lv4_0: k_reg_389.read());
}

void scurve_adder::thread_l_1_fu_550_p2() {
    l_1_fu_550_p2 = (!l_reg_400.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(l_reg_400.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void scurve_adder::thread_outStream_TDATA() {
    outStream_TDATA = (!tmp_11_reg_762.read()[0].is_01())? sc_lv<32>(): ((tmp_11_reg_762.read()[0].to_bool())? sum_pix1_q1.read(): sum_pix2_q1.read());
}

void scurve_adder::thread_outStream_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp2_stg0_fsm_6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_753.read()))) {
        outStream_TDATA_blk_n = outStream_TREADY.read();
    } else {
        outStream_TDATA_blk_n = ap_const_logic_1;
    }
}

void scurve_adder::thread_outStream_TDEST() {
    outStream_TDEST = tmp_dest_V_1_reg_748.read();
}

void scurve_adder::thread_outStream_TID() {
    outStream_TID = tmp_id_V_1_reg_743.read();
}

void scurve_adder::thread_outStream_TKEEP() {
    outStream_TKEEP = tmp_keep_V_1_reg_723.read();
}

void scurve_adder::thread_outStream_TLAST() {
    outStream_TLAST = tmp_last_V_1_reg_738.read();
}

void scurve_adder::thread_outStream_TSTRB() {
    outStream_TSTRB = tmp_strb_V_1_reg_728.read();
}

void scurve_adder::thread_outStream_TUSER() {
    outStream_TUSER = tmp_user_V_1_reg_733.read();
}

void scurve_adder::thread_outStream_TVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp2_stg0_fsm_6.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_753.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_outStream_TREADY.read())))) {
        outStream_TVALID = ap_const_logic_1;
    } else {
        outStream_TVALID = ap_const_logic_0;
    }
}

void scurve_adder::thread_p_lshr_f_cast_fu_560_p4() {
    p_lshr_f_cast_fu_560_p4 = l_reg_400.read().range(3, 1);
}

void scurve_adder::thread_sum_pix1_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        sum_pix1_address0 =  (sc_lv<3>) (tmp_fu_423_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()))) {
        sum_pix1_address0 =  (sc_lv<3>) (tmp_4_fu_509_p1.read());
    } else {
        sum_pix1_address0 = "XXX";
    }
}

void scurve_adder::thread_sum_pix1_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it4.read())) {
        sum_pix1_address1 = ap_reg_ppstg_sum_pix1_addr_1_reg_661_pp1_iter3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp2_stg0_fsm_6.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it0.read()))) {
        sum_pix1_address1 =  (sc_lv<3>) (tmp_10_fu_570_p1.read());
    } else {
        sum_pix1_address1 = "XXX";
    }
}

void scurve_adder::thread_sum_pix1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read())))) {
        sum_pix1_ce0 = ap_const_logic_1;
    } else {
        sum_pix1_ce0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_sum_pix1_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp2_stg0_fsm_6.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it0.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_753.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read())))) {
        sum_pix1_ce1 = ap_const_logic_1;
    } else {
        sum_pix1_ce1 = ap_const_logic_0;
    }
}

void scurve_adder::thread_sum_pix1_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_411_p2.read())))) {
        sum_pix1_we0 = ap_const_logic_1;
    } else {
        sum_pix1_we0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_sum_pix1_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter3.read())))) {
        sum_pix1_we1 = ap_const_logic_1;
    } else {
        sum_pix1_we1 = ap_const_logic_0;
    }
}

void scurve_adder::thread_sum_pix2_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        sum_pix2_address0 =  (sc_lv<3>) (tmp_fu_423_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()))) {
        sum_pix2_address0 =  (sc_lv<3>) (tmp_4_fu_509_p1.read());
    } else {
        sum_pix2_address0 = "XXX";
    }
}

void scurve_adder::thread_sum_pix2_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it4.read())) {
        sum_pix2_address1 = ap_reg_ppstg_sum_pix2_addr_1_reg_667_pp1_iter3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp2_stg0_fsm_6.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it0.read()))) {
        sum_pix2_address1 =  (sc_lv<3>) (tmp_10_fu_570_p1.read());
    } else {
        sum_pix2_address1 = "XXX";
    }
}

void scurve_adder::thread_sum_pix2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read())))) {
        sum_pix2_ce0 = ap_const_logic_1;
    } else {
        sum_pix2_ce0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_sum_pix2_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp2_stg0_fsm_6.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it0.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_753.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read())))) {
        sum_pix2_ce1 = ap_const_logic_1;
    } else {
        sum_pix2_ce1 = ap_const_logic_0;
    }
}

void scurve_adder::thread_sum_pix2_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_411_p2.read())))) {
        sum_pix2_we0 = ap_const_logic_1;
    } else {
        sum_pix2_we0 = ap_const_logic_0;
    }
}

void scurve_adder::thread_sum_pix2_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_flatten_reg_602_pp1_iter3.read())))) {
        sum_pix2_we1 = ap_const_logic_1;
    } else {
        sum_pix2_we1 = ap_const_logic_0;
    }
}

void scurve_adder::thread_tmp_10_fu_570_p1() {
    tmp_10_fu_570_p1 = esl_zext<64,3>(p_lshr_f_cast_fu_560_p4.read());
}

void scurve_adder::thread_tmp_11_fu_556_p1() {
    tmp_11_fu_556_p1 = l_reg_400.read().range(1-1, 0);
}

void scurve_adder::thread_tmp_1_fu_531_p2() {
    tmp_1_fu_531_p2 = (!tmp_s_fu_528_p1.read().is_01() || !sum_pix2_load_reg_678.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_s_fu_528_p1.read()) + sc_biguint<32>(sum_pix2_load_reg_678.read()));
}

void scurve_adder::thread_tmp_2_fu_429_p3() {
    tmp_2_fu_429_p3 = esl_concat<32,3>(param_read_reg_584.read(), ap_const_lv3_0);
}

void scurve_adder::thread_tmp_4_fu_509_p1() {
    tmp_4_fu_509_p1 = esl_zext<64,4>(k_mid2_reg_611.read());
}

void scurve_adder::thread_tmp_6_fu_489_p1() {
    tmp_6_fu_489_p1 = inStream_TDATA.read().range(8-1, 0);
}

void scurve_adder::thread_tmp_8_fu_520_p1() {
    tmp_8_fu_520_p1 = esl_zext<32,8>(ap_reg_ppstg_tmp_6_reg_646_pp1_iter2.read());
}

void scurve_adder::thread_tmp_9_fu_523_p2() {
    tmp_9_fu_523_p2 = (!tmp_8_fu_520_p1.read().is_01() || !sum_pix1_load_reg_673.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_8_fu_520_p1.read()) + sc_biguint<32>(sum_pix1_load_reg_673.read()));
}

void scurve_adder::thread_tmp_fu_423_p1() {
    tmp_fu_423_p1 = esl_zext<64,4>(i_reg_367.read());
}

void scurve_adder::thread_tmp_keep_V_1_fu_536_p1() {
    tmp_keep_V_1_fu_536_p1 = esl_zext<4,2>(dub_pix_keep_V_q0.read());
}

void scurve_adder::thread_tmp_s_fu_528_p1() {
    tmp_s_fu_528_p1 = esl_zext<32,8>(ap_reg_ppstg_phitmp_reg_651_pp1_iter2.read());
}

void scurve_adder::thread_tmp_strb_V_1_fu_540_p1() {
    tmp_strb_V_1_fu_540_p1 = esl_zext<4,2>(dub_pix_strb_V_q0.read());
}

void scurve_adder::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_411_p2.read())) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_pp1_stg0_fsm_3;
            break;
        case 8 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it3.read())) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()) && !esl_seteq<1,1,1>(exitcond_flatten_fu_436_p2.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read())))) {
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_3;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it4.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it3.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && ap_sig_158.read()) && 
  !esl_seteq<1,1,1>(exitcond_flatten_fu_436_p2.read(), ap_const_lv1_0) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read())))) {
                ap_NS_fsm = ap_ST_st9_fsm_4;
            } else {
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_3;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st10_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_pp2_stg0_fsm_6;
            break;
        case 64 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it0.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_753.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read())) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_544_p2.read()))) {
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_6;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it0.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp2_it1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_753.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_outStream_TREADY.read())) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_544_p2.read()))) {
                ap_NS_fsm = ap_ST_st13_fsm_7;
            } else {
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_6;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<8>) ("XXXXXXXX");
            break;
    }
}

void scurve_adder::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TDATA\" :  \"" << inStream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TVALID\" :  \"" << inStream_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"inStream_TREADY\" :  \"" << inStream_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TKEEP\" :  \"" << inStream_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TSTRB\" :  \"" << inStream_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TUSER\" :  \"" << inStream_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TLAST\" :  \"" << inStream_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TID\" :  \"" << inStream_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TDEST\" :  \"" << inStream_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TDATA\" :  \"" << outStream_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TVALID\" :  \"" << outStream_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outStream_TREADY\" :  \"" << outStream_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TKEEP\" :  \"" << outStream_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TSTRB\" :  \"" << outStream_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TUSER\" :  \"" << outStream_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TLAST\" :  \"" << outStream_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TID\" :  \"" << outStream_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TDEST\" :  \"" << outStream_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWVALID\" :  \"" << s_axi_CTRL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_AWREADY\" :  \"" << s_axi_CTRL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWADDR\" :  \"" << s_axi_CTRL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WVALID\" :  \"" << s_axi_CTRL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_WREADY\" :  \"" << s_axi_CTRL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WDATA\" :  \"" << s_axi_CTRL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WSTRB\" :  \"" << s_axi_CTRL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARVALID\" :  \"" << s_axi_CTRL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_ARREADY\" :  \"" << s_axi_CTRL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARADDR\" :  \"" << s_axi_CTRL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RVALID\" :  \"" << s_axi_CTRL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_RREADY\" :  \"" << s_axi_CTRL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RDATA\" :  \"" << s_axi_CTRL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RRESP\" :  \"" << s_axi_CTRL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BVALID\" :  \"" << s_axi_CTRL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_BREADY\" :  \"" << s_axi_CTRL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BRESP\" :  \"" << s_axi_CTRL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

